/**
 * Supabase Integration Test Page for –ü—Ä–∏–∑–º–∞
 * Comprehensive testing interface for all Supabase features
 */

'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { Button } from '@/components/ui/button';
import ErrorMessage from '@/components/ui/ErrorMessage';
import PrizmaTestRunner, {
  DatabaseTester,
  AuthTester,
  StorageTester,
  ReceiptFlowTester,
  TestDataCleanup,
  TestSuite,
  TestResult
} from '@/lib/test-utils';
import BulgarianTextTest from '@/components/test/BulgarianTextTest';

export default function SupabaseTestPage() {
  const { user, loading: authLoading } = useAuth();
  const [testResults, setTestResults] = useState<TestSuite[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [currentTest, setCurrentTest] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [cleanupResult, setCleanupResult] = useState<string | null>(null);
  const [isCleaningUp, setIsCleaningUp] = useState(false);
  const [testUserExists, setTestUserExists] = useState<boolean>(false);

  // Test credentials for registration/login tests
  const [testEmail, setTestEmail] = useState('test@prizma.bg');
  const [testPassword, setTestPassword] = useState('TestPassword123!');

  const runner = new PrizmaTestRunner();
  const dbTester = new DatabaseTester();
  const authTester = new AuthTester();
  const storageTester = new StorageTester();
  const receiptTester = new ReceiptFlowTester();
  const cleanup = new TestDataCleanup();

  const updateCurrentTest = (testName: string) => {
    setCurrentTest(testName);
  };

  const runAllTests = async () => {
    setIsRunning(true);
    setError(null);
    setTestResults([]);

    try {
      // Test 1: Database Connection and Access
      runner.startSuite('üóÑÔ∏è –¢–µ—Å—Ç–æ–≤–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏');

      await runner.runTest('–°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏', async () => {
        updateCurrentTest('–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏...');
        return await dbTester.testConnection();
      });

      await runner.runTest('–î–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–±–ª–∏—Ü–∏', async () => {
        updateCurrentTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø–∞ –¥–æ —Ç–∞–±–ª–∏—Ü–∏...');
        return await dbTester.testTableAccess();
      });

      if (user) {
        await runner.runTest('RLS –ø–æ–ª–∏—Ç–∏–∫–∏', async () => {
          updateCurrentTest('–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ RLS –ø–æ–ª–∏—Ç–∏–∫–∏—Ç–µ...');
          return await dbTester.testRLSPolicies(user.id);
        });
      }

      const dbSuite = runner.finishSuite();
      setTestResults(prev => [...prev, dbSuite]);

      // Test 2: Authentication Flow
      runner.startSuite('üîê –¢–µ—Å—Ç–æ–≤–µ –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è—Ç–∞');

      await runner.runTest('–¢–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª', async () => {
        updateCurrentTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª...');
        return await authTester.getCurrentUser();
      });

      if (!user) {
        await runner.runTest('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª', async () => {
          updateCurrentTest('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª...');
          return await authTester.testRegistration(testEmail, testPassword);
        });

        await runner.runTest('–í—Ö–æ–¥ —Å —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª', async () => {
          updateCurrentTest('–í—Ö–æ–¥ —Å —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏...');
          return await authTester.testLogin(testEmail, testPassword);
        });
      }

      const authSuite = runner.finishSuite();
      setTestResults(prev => [...prev, authSuite]);

      // Test 3: Storage
      runner.startSuite('üìÅ –¢–µ—Å—Ç–æ–≤–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ—Ç–æ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ');

      await runner.runTest('–î–æ—Å—Ç—ä–ø –¥–æ storage buckets', async () => {
        updateCurrentTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø–∞ –¥–æ storage...');
        return await storageTester.testBucketAccess();
      });

      if (user) {
        await runner.runTest('–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤ —Ñ–∞–π–ª', async () => {
          updateCurrentTest('–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤ —Ñ–∞–π–ª...');
          const testFile = storageTester.createTestFile();
          return await storageTester.testFileUpload(testFile, user.id);
        });
      }

      const storageSuite = runner.finishSuite();
      setTestResults(prev => [...prev, storageSuite]);

      // Test 4: Receipt Flow (only if authenticated)
      if (user) {
        runner.startSuite('üßæ –¢–µ—Å—Ç–æ–≤–µ –Ω–∞ –∫–∞—Å–æ–≤–∏—Ç–µ –±–µ–ª–µ–∂–∫–∏');

        let testReceiptResult: any;
        await runner.runTest('–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞', async () => {
          updateCurrentTest('–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞...');
          testReceiptResult = await receiptTester.createTestReceipt(user.id);
          return testReceiptResult;
        });

        await runner.runTest('–ó–∞—è–≤–∫–∞ –∑–∞ –±–µ–ª–µ–∂–∫–∏ —Å —Ä–µ–ª–∞—Ü–∏–∏', async () => {
          updateCurrentTest('–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∏ –∑–∞ –±–µ–ª–µ–∂–∫–∏...');
          return await receiptTester.testReceiptQuery(user.id);
        });

        await runner.runTest('–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏', async () => {
          updateCurrentTest('–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏...');
          return await receiptTester.cleanupTestData(user.id);
        });

        const receiptSuite = runner.finishSuite();
        setTestResults(prev => [...prev, receiptSuite]);
      }

      updateCurrentTest('');
    } catch (err: any) {
      setError(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ: ${err.message}`);
    } finally {
      setIsRunning(false);
    }
  };

  const getOverallStats = () => {
    const totals = testResults.reduce(
      (acc, suite) => ({
        total: acc.total + suite.summary.total,
        passed: acc.passed + suite.summary.passed,
        failed: acc.failed + suite.summary.failed
      }),
      { total: 0, passed: 0, failed: 0 }
    );

    return totals;
  };

  const downloadReport = () => {
    const report = runner.generateReport();
    const blob = new Blob([report], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `prizma-test-report-${new Date().toISOString().slice(0, 19)}.txt`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleCleanupTestData = async () => {
    if (!user) {
      setCleanupResult('‚ùå –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω –∑–∞ –¥–∞ –∏–∑—á–∏—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω–∏');
      return;
    }

    setIsCleaningUp(true);
    setCleanupResult(null);

    try {
      const result = await cleanup.cleanupAll(user.id);

      if (result.success) {
        setCleanupResult(`‚úÖ ${result.message}\n‚Ä¢ –ë–µ–ª–µ–∂–∫–∏: ${result.receipts.deleted}\n‚Ä¢ –§–∞–π–ª–æ–≤–µ: ${result.files.deleted}`);
      } else {
        setCleanupResult(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ:\n${result.errors.join('\n')}`);
      }
    } catch (error: any) {
      setCleanupResult(`‚ùå –ì—Ä–µ—à–∫–∞: ${error.message}`);
    } finally {
      setIsCleaningUp(false);
    }
  };

  const checkTestUserExists = async () => {
    try {
      const response = await fetch('/api/test/check-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: testEmail })
      });
      const data = await response.json();
      setTestUserExists(data.exists || false);
    } catch (error) {
      console.error('Error checking user:', error);
      setTestUserExists(false);
    }
  };

  const handleDeleteTestUser = async () => {
    if (!confirm(`–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–µ—Å—Ç–æ–≤–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª ${testEmail}?\n\n–¢–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏–µ –µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)) {
      return;
    }

    setIsCleaningUp(true);
    setCleanupResult(null);

    try {
      const result = await cleanup.deleteTestUser(testEmail);
      setCleanupResult(`‚úÖ ${result.message}`);
      setTestUserExists(false); // Update state after deletion
    } catch (error: any) {
      setCleanupResult(`‚ùå –ì—Ä–µ—à–∫–∞: ${error.message}`);
    } finally {
      setIsCleaningUp(false);
    }
  };

  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <p className="mt-2 text-sm text-gray-600">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üß™ –¢–µ—Å—Ç–æ–≤–µ –Ω–∞ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞
          </h1>
          <p className="text-gray-600">
            –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ Supabase —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –ü—Ä–∏–∑–º–∞
          </p>
        </div>

        {/* Authentication Status */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            –°—Ç–∞—Ç—É—Å –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è—Ç–∞
          </h3>
          {user ? (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center">
                <svg className="h-5 w-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span className="text-green-800">
                  –ê–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω –∫–∞—Ç–æ: {user.email}
                </span>
              </div>
            </div>
          ) : (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-center">
                <svg className="h-5 w-5 text-yellow-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <span className="text-yellow-800">
                  –ù–µ —Å—Ç–µ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω - –Ω—è–∫–æ–∏ —Ç–µ—Å—Ç–æ–≤–µ —â–µ –±—ä–¥–∞—Ç –ø—Ä–æ–ø—É—Å–Ω–∞—Ç–∏
                </span>
              </div>
            </div>
          )}
        </div>

        {/* Test Configuration */}
        {!user && (
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–µ—Å—Ç–æ–≤ –∏–º–µ–π–ª
                </label>
                <input
                  type="email"
                  value={testEmail}
                  onChange={(e) => setTestEmail(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä–æ–ª–∞
                </label>
                <input
                  type="password"
                  value={testPassword}
                  onChange={(e) => setTestPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          </div>
        )}

        {/* Test Controls */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-medium text-gray-900">
                –ö–æ–Ω—Ç—Ä–æ–ª –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ
              </h3>
              {currentTest && (
                <p className="text-sm text-blue-600 mt-1">
                  {currentTest}
                </p>
              )}
            </div>
            <div className="flex space-x-4">
              <Button
                onClick={runAllTests}
                disabled={isRunning}
                className="relative"
              >
                {isRunning ? (
                  <>
                    <div className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ...
                  </>
                ) : (
                  '–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ'
                )}
              </Button>
              {testResults.length > 0 && (
                <Button
                  variant="outline"
                  onClick={downloadReport}
                  disabled={isRunning}
                >
                  –°–≤–∞–ª—è–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
                </Button>
              )}
            </div>
          </div>
        </div>

        {/* Error Display */}
        {error && (
          <div className="mb-6">
            <ErrorMessage
              message={error}
              onRetry={() => setError(null)}
            />
          </div>
        )}

        {/* Overall Stats */}
        {testResults.length > 0 && (
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              –û–±—â —Ä–µ–∑—É–ª—Ç–∞—Ç
            </h3>
            <div className="grid grid-cols-3 gap-4">
              {(() => {
                const stats = getOverallStats();
                return (
                  <>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-gray-900">{stats.total}</div>
                      <div className="text-sm text-gray-600">–û–±—â–æ —Ç–µ—Å—Ç–æ–≤–µ</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">{stats.passed}</div>
                      <div className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω–∏</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-red-600">{stats.failed}</div>
                      <div className="text-sm text-gray-600">–ù–µ—É—Å–ø–µ—à–Ω–∏</div>
                    </div>
                  </>
                );
              })()}
            </div>
          </div>
        )}

        {/* Test Results */}
        {testResults.map((suite, index) => (
          <div key={index} className="bg-white rounded-lg shadow p-6 mb-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                {suite.name}
              </h3>
              <div className="flex items-center space-x-4 text-sm">
                <span className="text-green-600">
                  ‚úÖ {suite.summary.passed}
                </span>
                <span className="text-red-600">
                  ‚ùå {suite.summary.failed}
                </span>
                <span className="text-gray-500">
                  {suite.summary.duration}ms
                </span>
              </div>
            </div>

            <div className="space-y-3">
              {suite.tests.map((test, testIndex) => (
                <div
                  key={testIndex}
                  className={`p-4 rounded-lg border ${
                    test.success
                      ? 'bg-green-50 border-green-200'
                      : 'bg-red-50 border-red-200'
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center">
                        <span className="mr-2">
                          {test.success ? '‚úÖ' : '‚ùå'}
                        </span>
                        <span className={`font-medium ${
                          test.success ? 'text-green-800' : 'text-red-800'
                        }`}>
                          {test.message}
                        </span>
                      </div>

                      {test.error && (
                        <div className="mt-2 text-sm text-red-700">
                          <strong>–ì—Ä–µ—à–∫–∞:</strong> {test.error}
                        </div>
                      )}

                      {test.details && test.success && (
                        <details className="mt-2">
                          <summary className="text-sm text-gray-600 cursor-pointer">
                            –ü–æ–∫–∞–∂–∏ –¥–µ—Ç–∞–π–ª–∏
                          </summary>
                          <pre className="mt-2 text-xs bg-gray-100 p-2 rounded overflow-x-auto">
                            {JSON.stringify(test.details, null, 2)}
                          </pre>
                        </details>
                      )}
                    </div>

                    <div className="text-xs text-gray-500 ml-4">
                      {new Date(test.timestamp).toLocaleTimeString('bg-BG')}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}

        {/* Cleanup Tools */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            üßπ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ
          </h3>

          <div className="space-y-4">
            {/* Cleanup test data */}
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div className="flex-1">
                <h4 className="font-medium text-gray-900">–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏</h4>
                <p className="text-sm text-gray-600 mt-1">
                  –ò–∑—Ç—Ä–∏–≤–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–∏ –±–µ–ª–µ–∂–∫–∏ –∏ —Ñ–∞–π–ª–æ–≤–µ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ –ø—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 24 —á–∞—Å–∞
                </p>
              </div>
              <Button
                variant="outline"
                onClick={handleCleanupTestData}
                disabled={isCleaningUp || !user}
                className="ml-4"
              >
                {isCleaningUp ? '–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ...' : '–ò–∑—á–∏—Å—Ç–∏ –¥–∞–Ω–Ω–∏'}
              </Button>
            </div>

            {/* Delete test user */}
            <div className="flex items-center justify-between p-4 bg-yellow-50 rounded-lg border border-yellow-200">
              <div className="flex-1">
                <h4 className="font-medium text-yellow-900">–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª</h4>
                <p className="text-sm text-yellow-700 mt-1">
                  –ó–∞ –¥–∞ —Ç–µ—Å—Ç–≤–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –æ—Ç–Ω–æ–≤–æ, –ø—Ä–æ–º–µ–Ω–µ—Ç–µ —Ç–µ—Å—Ç–æ–≤–∏—è email –Ω–∞ –Ω–æ–≤ (–Ω–∞–ø—Ä. test2@prizma.bg, test3@prizma.bg)
                  –∏–ª–∏ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ Supabase Dashboard –∑–∞ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ä—ä—á–Ω–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è {testEmail}
                </p>
              </div>
            </div>

            {/* Cleanup result */}
            {cleanupResult && (
              <div className={`p-4 rounded-lg ${
                cleanupResult.startsWith('‚úÖ')
                  ? 'bg-green-50 border border-green-200'
                  : cleanupResult.startsWith('‚ö†Ô∏è')
                  ? 'bg-yellow-50 border border-yellow-200'
                  : 'bg-red-50 border border-red-200'
              }`}>
                <pre className="text-sm whitespace-pre-wrap font-mono">
                  {cleanupResult}
                </pre>
              </div>
            )}
          </div>
        </div>

        {/* Bulgarian Text Test */}
        <BulgarianTextTest />

        {/* Instructions */}
        {testResults.length === 0 && !isRunning && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mt-6">
            <h3 className="text-lg font-medium text-blue-900 mb-2">
              –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
            </h3>
            <div className="text-sm text-blue-800 space-y-2">
              <p>‚Ä¢ –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ "–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ</p>
              <p>‚Ä¢ –¢–µ—Å—Ç–æ–≤–µ—Ç–µ —â–µ –ø—Ä–æ–≤–µ—Ä—è—Ç –≤—Å–∏—á–∫–∏ –∞—Å–ø–µ–∫—Ç–∏ –Ω–∞ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞</p>
              <p>‚Ä¢ –ó–∞ –ø—ä–ª–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ —Å–µ –Ω—É–∂–¥–∞–µ—Ç–µ –æ—Ç –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è</p>
              <p>‚Ä¢ –†–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç —Å–≤–∞–ª–µ–Ω–∏ –∫–∞—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤ —Ñ–∞–π–ª</p>
              <p>‚Ä¢ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏ —Å–µ –∏–∑—á–∏—Å—Ç–≤–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</p>
              <p>‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –±—ä–ª–≥–∞—Ä—Å–∫–∏—è —Ç–µ–∫—Å—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ-–≥–æ—Ä–µ</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
import { NextRequest, NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient as createSSRServerClient } from '@supabase/ssr'

const NEW_USER_THRESHOLD = 5 // Users with fewer receipts are considered new

export async function GET(request: NextRequest) {
  try {
    // Create SSR-compatible Supabase client with cookie handling
    const cookieStore = await cookies()
    const supabase = createSSRServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value
          },
          set(name: string, value: string, options: any) {
            cookieStore.set(name, value, options)
          },
          remove(name: string, options: any) {
            cookieStore.set(name, '', { ...options, maxAge: 0 })
          },
        },
      }
    )

    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    if (userError || !user) {
      console.error('Auth error in analytics:', userError)
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get total receipts count
    const { count: totalReceipts, error: countError } = await supabase
      .from('receipts')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', user.id)

    if (countError) throw countError

    const isNewUser = (totalReceipts || 0) < NEW_USER_THRESHOLD

    // Get monthly spending (current month)
    const startOfMonth = new Date()
    startOfMonth.setDate(1)
    startOfMonth.setHours(0, 0, 0, 0)

    const { data: monthlyReceipts, error: monthlyError } = await supabase
      .from('receipts')
      .select('total_amount')
      .eq('user_id', user.id)
      .gte('created_at', startOfMonth.toISOString())

    if (monthlyError) throw monthlyError

    const monthlySpending = monthlyReceipts?.reduce(
      (sum, receipt) => sum + (receipt.total_amount || 0),
      0
    ) || 0

    // Get top categories - join with receipts to filter by user
    const { data: categoryData, error: categoryError } = await supabase
      .from('items')
      .select('category_id, total_price, receipt_id, receipts!inner(user_id)')
      .eq('receipts.user_id', user.id)

    if (categoryError) throw categoryError

    // Aggregate by category
    const categoryMap = new Map<string, number>()
    categoryData?.forEach((item: any) => {
      const category = item.category_id || 'uncategorized'
      const current = categoryMap.get(category) || 0
      categoryMap.set(category, current + (item.total_price || 0))
    })

    const topCategories = Array.from(categoryMap.entries())
      .map(([category, amount]) => ({ category, amount }))
      .sort((a, b) => b.amount - a.amount)
      .slice(0, 5)

    // Get or generate insights
    const { data: cachedInsights } = await (supabase as any)
      .from('user_insights')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(10)

    // Transform cached insights to expected format
    const insights = cachedInsights?.map((insight: any) => ({
      id: insight.id,
      type: insight.insight_type,
      title: insight.title,
      description: insight.description,
      priority: insight.priority,
      icon: getIconForType(insight.insight_type)
    })) || []

    // If new user and no insights, add generic recommendations
    if (isNewUser && insights.length === 0) {
      return NextResponse.json({
        insights: getGenericRecommendations(),
        isNewUser: true,
        totalReceipts: totalReceipts || 0,
        monthlySpending,
        topCategories
      })
    }

    return NextResponse.json({
      insights,
      isNewUser,
      totalReceipts: totalReceipts || 0,
      monthlySpending,
      topCategories
    })

  } catch (error) {
    console.error('Error fetching analytics:', error)
    return NextResponse.json(
      { error: 'Failed to fetch analytics' },
      { status: 500 }
    )
  }
}

function getIconForType(type: string): string {
  const icons: Record<string, string> = {
    'saving_opportunity': 'üí∞',
    'budget_warning': '‚ö†Ô∏è',
    'spending_pattern': 'üìä',
    'recommendation': 'üí°',
    'goal_progress': 'üéØ',
    'category_insight': 'üìà'
  }
  return icons[type] || 'üìã'
}

function getGenericRecommendations() {
  return [
    {
      id: 'generic-1',
      type: 'recommendation',
      title: '–ó–∞–ø–æ—á–Ω–µ—Ç–µ –¥–∞ —Å–ª–µ–¥–∏—Ç–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ —Å–∏',
      description: '–ö–∞—á–≤–∞–π—Ç–µ –±–æ–Ω–æ–≤–µ —Ä–µ–¥–æ–≤–Ω–æ, –∑–∞ –¥–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∞–Ω–∞–ª–∏–∑–∏ –∑–∞ –≤–∞—à–∏—Ç–µ —Ä–∞–∑—Ö–æ–¥–∏. Prisma –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–∞ –ø–æ–∫—É–ø–∫–∏—Ç–µ –∏ –≤–∏ –ø–æ–º–∞–≥–∞ –¥–∞ —Å–ª–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç–∞.',
      priority: 'medium',
      icon: 'üì∏'
    },
    {
      id: 'generic-2',
      type: 'recommendation',
      title: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ—Å–µ—á–µ–Ω –±—é–¥–∂–µ—Ç',
      description: '–°—ä–∑–¥–∞–π—Ç–µ –º–µ—Å–µ—á–µ–Ω –±—é–¥–∂–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ, –∑–∞ –¥–∞ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–≥–∞—Ç–æ —Å–µ –ø—Ä–∏–±–ª–∏–∂–∞–≤–∞—Ç–µ –∫—ä–º –ª–∏–º–∏—Ç–∞. –¢–æ–≤–∞ –µ –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞ –∫—ä–º –ø–æ-–¥–æ–±—Ä–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –ø–ª–∞–Ω–∏—Ä–∞–Ω–µ.',
      priority: 'medium',
      icon: 'üí≥'
    },
    {
      id: 'generic-3',
      type: 'recommendation',
      title: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–∞–π—Ç–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ —Å–∏',
      description: '–†–∞–∑–¥–µ–ª–µ—Ç–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ —Å–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–æ —Ö—Ä–∞–Ω–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∑–∞–±–∞–≤–ª–µ–Ω–∏—è –∏ –¥—Ä. –¢–æ–≤–∞ —â–µ –≤–∏ –ø–æ–º–æ–≥–Ω–µ –¥–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç–µ –∫—ä–¥–µ –æ—Ç–∏–≤–∞—Ç –ø–∞—Ä–∏—Ç–µ –≤–∏.',
      priority: 'low',
      icon: 'üè∑Ô∏è'
    },
    {
      id: 'generic-4',
      type: 'recommendation',
      title: '–°–ª–µ–¥–µ—Ç–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏—Ç–µ',
      description: '–°–ª–µ–¥ –∫–∞—Ç–æ –∫–∞—á–∏—Ç–µ –ø–æ–Ω–µ 10-15 –±–æ–Ω–∞, Prisma —â–µ –º–æ–∂–µ –¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –≤–∞—à–∏—Ç–µ –Ω–∞–≤–∏—Ü–∏ –∏ –¥–∞ –≤–∏ –¥–∞–¥–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ —Å–ø–µ—Å—Ç—è–≤–∞–Ω–µ.',
      priority: 'low',
      icon: 'üìà'
    }
  ]
}

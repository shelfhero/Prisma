/**
 * Debug Script for Supabase Connection
 * Quick debugging tools for testing Supabase functionality
 */

import { createBrowserClient } from './supabase-simple';

export interface DebugResult {
  test: string;
  success: boolean;
  message: string;
  data?: any;
  error?: string;
}

export async function debugSupabaseConnection(): Promise<DebugResult[]> {
  const results: DebugResult[] = [];

  try {
    // Test 1: Create client
    let supabase: any;
    try {
      supabase = createBrowserClient();
      results.push({
        test: '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Supabase –∫–ª–∏–µ–Ω—Ç',
        success: true,
        message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      });
    } catch (error: any) {
      results.push({
        test: '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Supabase –∫–ª–∏–µ–Ω—Ç',
        success: false,
        message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞',
        error: error.message
      });
      return results;
    }

    // Test 2: Check environment variables
    const envVars = {
      NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
      NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    };

    const missingVars = Object.entries(envVars)
      .filter(([_, value]) => !value)
      .map(([key, _]) => key);

    results.push({
      test: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables',
      success: missingVars.length === 0,
      message: missingVars.length === 0
        ? '–í—Å–∏—á–∫–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏'
        : `–õ–∏–ø—Å–≤–∞—Ç –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏: ${missingVars.join(', ')}`,
      data: {
        url: envVars.NEXT_PUBLIC_SUPABASE_URL ? '–Ω–∞–ª–∏—á–Ω–∞' : '–ª–∏–ø—Å–≤–∞',
        key: envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '–Ω–∞–ª–∏—á–Ω–∞' : '–ª–∏–ø—Å–≤–∞'
      }
    });

    // Test 3: Simple query
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('count')
        .limit(1);

      results.push({
        test: '–ü—Ä–æ—Å—Ç–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏',
        success: !error,
        message: error ? `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞: ${error.message}` : '–ó–∞—è–≤–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞',
        data: data,
        error: error?.message
      });
    } catch (error: any) {
      results.push({
        test: '–ü—Ä–æ—Å—Ç–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏',
        success: false,
        message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞',
        error: error.message
      });
    }

    // Test 4: Auth state
    try {
      const { data: { user }, error } = await supabase.auth.getUser();

      results.push({
        test: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è—Ç–∞',
        success: !error,
        message: user
          ? `–ê–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω –∫–∞—Ç–æ: ${user.email}`
          : '–ù–µ —Å—Ç–µ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∏—Ä–∞–Ω',
        data: {
          authenticated: !!user,
          email: user?.email || null
        },
        error: error?.message
      });
    } catch (error: any) {
      results.push({
        test: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è—Ç–∞',
        success: false,
        message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è—Ç–∞',
        error: error.message
      });
    }

    // Test 5: Tables access
    const tables = ['profiles', 'receipts', 'items', 'categories', 'retailers'];
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);

        results.push({
          test: `–î–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–±–ª–∏—Ü–∞ '${table}'`,
          success: !error,
          message: error
            ? `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—ä–ø: ${error.message}`
            : `–£—Å–ø–µ—à–µ–Ω –¥–æ—Å—Ç—ä–ø (${data?.length || 0} –∑–∞–ø–∏—Å–∞)`,
          data: { hasData: (data?.length || 0) > 0 },
          error: error?.message
        });
      } catch (error: any) {
        results.push({
          test: `–î–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–±–ª–∏—Ü–∞ '${table}'`,
          success: false,
          message: '–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞',
          error: error.message
        });
      }
    }

  } catch (error: any) {
    results.push({
      test: '–û–±—â —Ç–µ—Å—Ç –Ω–∞ Supabase',
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ',
      error: error.message
    });
  }

  return results;
}

export async function quickHealthCheck(): Promise<boolean> {
  try {
    const supabase = createBrowserClient();
    const { error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);

    return !error;
  } catch {
    return false;
  }
}

export function logDebugInfo() {
  console.log('üîç –ü—Ä–∏–∑–º–∞ Debug Info');
  console.log('='.repeat(30));
  console.log('Environment:', process.env.NODE_ENV);
  console.log('Supabase URL:', process.env.NEXT_PUBLIC_SUPABASE_URL || 'NOT SET');
  console.log('Anon Key:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET');
  console.log('User Agent:', typeof window !== 'undefined' ? navigator.userAgent : 'Server');
  console.log('Timestamp:', new Date().toISOString());
  console.log('='.repeat(30));
}

export default debugSupabaseConnection;
/**
 * Bulgarian formatting utilities for –ü—Ä–∏–∑–º–∞
 * Handles currency, date, number, and text formatting according to Bulgarian standards
 */

export const BULGARIAN_MONTHS = [
  { value: 1, label: '–Ø–Ω—É–∞—Ä–∏', short: '–Ø–Ω' },
  { value: 2, label: '–§–µ–≤—Ä—É–∞—Ä–∏', short: '–§–µ–≤' },
  { value: 3, label: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
  { value: 4, label: '–ê–ø—Ä–∏–ª', short: '–ê–ø—Ä' },
  { value: 5, label: '–ú–∞–π', short: '–ú–∞–π' },
  { value: 6, label: '–Æ–Ω–∏', short: '–Æ–Ω–∏' },
  { value: 7, label: '–Æ–ª–∏', short: '–Æ–ª–∏' },
  { value: 8, label: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
  { value: 9, label: '–°–µ–ø—Ç–µ–º–≤—Ä–∏', short: '–°–µ–ø' },
  { value: 10, label: '–û–∫—Ç–æ–º–≤—Ä–∏', short: '–û–∫—Ç' },
  { value: 11, label: '–ù–æ–µ–º–≤—Ä–∏', short: '–ù–æ–µ' },
  { value: 12, label: '–î–µ–∫–µ–º–≤—Ä–∏', short: '–î–µ–∫' },
];

export const BULGARIAN_WEEKDAYS = [
  '–Ω–µ–¥–µ–ª—è', '–ø–æ–Ωedel–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä—è–¥–∞', '—á–µ—Ç–≤—ä—Ä—Ç—ä–∫', '–ø–µ—Ç—ä–∫', '—Å—ä–±–æ—Ç–∞'
];

export const BULGARIAN_UNITS = {
  'kg': '–∫–≥',
  'g': '–≥—Ä',
  'l': '–ª',
  'ml': '–º–ª',
  'pcs': '–±—Ä',
  'pack': '–ø–∞–∫',
  'bottle': '–±—É—Ç',
  'box': '–∫—É—Ç'
};

/**
 * Format currency in Bulgarian Leva
 */
export function formatBulgarianCurrency(amount: number): string {
  return new Intl.NumberFormat('bg-BG', {
    style: 'currency',
    currency: 'BGN',
    minimumFractionDigits: 2,
  }).format(amount).replace('BGN', '–ª–≤');
}

/**
 * Format number with Bulgarian locale
 */
export function formatBulgarianNumber(num: number, options?: Intl.NumberFormatOptions): string {
  return new Intl.NumberFormat('bg-BG', options).format(num);
}

/**
 * Format percentage with Bulgarian locale
 */
export function formatBulgarianPercentage(percentage: number): string {
  return new Intl.NumberFormat('bg-BG', {
    style: 'percent',
    minimumFractionDigits: 1,
    maximumFractionDigits: 1,
  }).format(percentage / 100);
}

/**
 * Format date in Bulgarian format (DD.MM.YYYY)
 */
export function formatBulgarianDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('bg-BG', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

/**
 * Format date and time in Bulgarian format
 */
export function formatBulgarianDateTime(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleString('bg-BG', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  });
}

/**
 * Format long date with month name in Bulgarian
 */
export function formatBulgarianLongDate(dateString: string): string {
  const date = new Date(dateString);
  const day = date.getDate();
  const month = BULGARIAN_MONTHS[date.getMonth()].label.toLowerCase();
  const year = date.getFullYear();

  return `${day} ${month} ${year} –≥.`;
}

/**
 * Format quantity with unit in Bulgarian
 */
export function formatQuantity(quantity: number, unit?: string | null): string {
  const formattedQty = formatBulgarianNumber(quantity);

  if (!unit) {
    return `${formattedQty} –±—Ä.`;
  }

  // Translate common units to Bulgarian
  const bulgarianUnit = BULGARIAN_UNITS[unit as keyof typeof BULGARIAN_UNITS] || unit;
  return `${formattedQty} ${bulgarianUnit}`;
}

/**
 * Format month and year for display
 */
export function formatMonthYear(month: number, year: number): string {
  const monthName = BULGARIAN_MONTHS.find(m => m.value === month)?.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
  return `${monthName} ${year} –≥.`;
}

/**
 * Get relative time string in Bulgarian
 */
export function getBulgarianRelativeTime(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));

  if (diffInDays === 0) return '–¥–Ω–µ—Å';
  if (diffInDays === 1) return '–≤—á–µ—Ä–∞';
  if (diffInDays === 2) return '–æ–Ω–∑–∏ –¥–µ–Ω';
  if (diffInDays < 7) return `–ø—Ä–µ–¥–∏ ${diffInDays} –¥–Ω–∏`;
  if (diffInDays < 30) {
    const weeks = Math.floor(diffInDays / 7);
    return `–ø—Ä–µ–¥–∏ ${weeks} ${weeks === 1 ? '—Å–µ–¥–º–∏—Ü–∞' : '—Å–µ–¥–º–∏—Ü–∏'}`;
  }
  if (diffInDays < 365) {
    const months = Math.floor(diffInDays / 30);
    return `–ø—Ä–µ–¥–∏ ${months} ${months === 1 ? '–º–µ—Å–µ—Ü' : '–º–µ—Å–µ—Ü–∞'}`;
  }

  const years = Math.floor(diffInDays / 365);
  return `–ø—Ä–µ–¥–∏ ${years} ${years === 1 ? '–≥–æ–¥–∏–Ω–∞' : '–≥–æ–¥–∏–Ω–∏'}`;
}

/**
 * Format price range
 */
export function formatPriceRange(min: number, max: number): string {
  if (min === max) return formatBulgarianCurrency(min);
  return `${formatBulgarianCurrency(min)} - ${formatBulgarianCurrency(max)}`;
}

/**
 * Format spending trend text
 */
export function formatSpendingTrend(
  trend: 'up' | 'down' | 'stable',
  percentage: number
): string {
  const formattedPercentage = Math.abs(percentage).toFixed(1);

  switch (trend) {
    case 'up':
      return `‚ÜóÔ∏è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å ${formattedPercentage}%`;
    case 'down':
      return `‚ÜòÔ∏è –Ω–∞–º–∞–ª–µ–Ω–∏–µ —Å ${formattedPercentage}%`;
    case 'stable':
      return `‚Üí —Å—Ç–∞–±–∏–ª–Ω–æ (${formattedPercentage}%)`;
    default:
      return '–Ω—è–º–∞ –¥–∞–Ω–Ω–∏';
  }
}

/**
 * Format budget status text
 */
export function formatBudgetStatus(
  used: number,
  budget: number
): { status: 'good' | 'warning' | 'danger'; text: string; color: string } {
  const percentage = (used / budget) * 100;

  if (percentage <= 75) {
    return {
      status: 'good',
      text: `‚úÖ –í —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –±—é–¥–∂–µ—Ç–∞ (${percentage.toFixed(1)}%)`,
      color: 'text-green-600'
    };
  } else if (percentage <= 90) {
    return {
      status: 'warning',
      text: `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ - –±–ª–∏–∑–æ –¥–æ –ª–∏–º–∏—Ç–∞ (${percentage.toFixed(1)}%)`,
      color: 'text-yellow-600'
    };
  } else if (percentage <= 100) {
    return {
      status: 'danger',
      text: `üî∏ –ü–æ—á—Ç–∏ –∏–∑—á–µ—Ä–ø–∞–Ω –±—é–¥–∂–µ—Ç (${percentage.toFixed(1)}%)`,
      color: 'text-orange-600'
    };
  } else {
    return {
      status: 'danger',
      text: `‚ùå –ë—é–¥–∂–µ—Ç—ä—Ç –µ –ø—Ä–µ–≤–∏—à–µ–Ω —Å ${formatBulgarianCurrency(used - budget)}`,
      color: 'text-red-600'
    };
  }
}

/**
 * Pluralize Bulgarian words
 */
export function pluralizeBulgarian(
  count: number,
  singular: string,
  plural: string,
  special?: string
): string {
  if (count === 1) return singular;
  if (count === 2 && special) return special;
  return plural;
}

/**
 * Common pluralization helpers
 */
export const BulgarianPlurals = {
  products: (count: number) => pluralizeBulgarian(count, '–ø—Ä–æ–¥—É–∫—Ç', '–ø—Ä–æ–¥—É–∫—Ç–∞'),
  receipts: (count: number) => pluralizeBulgarian(count, '–±–µ–ª–µ–∂–∫–∞', '–±–µ–ª–µ–∂–∫–∏'),
  stores: (count: number) => pluralizeBulgarian(count, '–º–∞–≥–∞–∑–∏–Ω', '–º–∞–≥–∞–∑–∏–Ω–∞'),
  categories: (count: number) => pluralizeBulgarian(count, '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
  days: (count: number) => pluralizeBulgarian(count, '–¥–µ–Ω', '–¥–Ω–∏'),
  weeks: (count: number) => pluralizeBulgarian(count, '—Å–µ–¥–º–∏—Ü–∞', '—Å–µ–¥–º–∏—Ü–∏'),
  months: (count: number) => pluralizeBulgarian(count, '–º–µ—Å–µ—Ü', '–º–µ—Å–µ—Ü–∞'),
  years: (count: number) => pluralizeBulgarian(count, '–≥–æ–¥–∏–Ω–∞', '–≥–æ–¥–∏–Ω–∏'),
};

/**
 * Format file size in Bulgarian
 */
export function formatFileSize(bytes: number): string {
  const sizes = ['–±–∞–π—Ç–∞', 'KB', 'MB', 'GB'];
  if (bytes === 0) return '0 –±–∞–π—Ç–∞';

  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  const size = (bytes / Math.pow(1024, i)).toFixed(i === 0 ? 0 : 1);

  return `${size} ${sizes[i]}`;
}

/**
 * Validation messages in Bulgarian
 */
export const BulgarianValidationMessages = {
  required: '–¢–æ–≤–∞ –ø–æ–ª–µ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ',
  email: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å',
  minLength: (min: number) => `–ú–∏–Ω–∏–º—É–º ${min} —Å–∏–º–≤–æ–ª–∞`,
  maxLength: (max: number) => `–ú–∞–∫—Å–∏–º—É–º ${max} —Å–∏–º–≤–æ–ª–∞`,
  numeric: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ —á–∏—Å–ª–æ',
  positive: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ',
  decimal: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–æ –¥–µ—Å–µ—Ç–∏—á–Ω–æ —á–∏—Å–ª–æ',
  date: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞',
  phone: '–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä',
  password: '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ 8 —Å–∏–º–≤–æ–ª–∞',
  confirmPassword: '–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç',
  fileSize: (maxMB: number) => `–§–∞–π–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ-–º–∞–ª–∫–æ –æ—Ç ${maxMB}MB`,
  fileType: (types: string[]) => `–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏: ${types.join(', ')}`,
};
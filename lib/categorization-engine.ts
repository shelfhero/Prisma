import OpenAI from 'openai';
import { createServerClient } from './supabase-simple';
import { getCategoryFromCache, normalizeProductName as normalizeBulgarianProduct } from './bulgarian-product-cache';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Category definitions with emojis and colors
export const CATEGORIES = {
  BASIC_FOODS: {
    id: 'basic_foods',
    name: '–û—Å–Ω–æ–≤–Ω–∏ —Ö—Ä–∞–Ω–∏',
    icon: 'üçé',
    color: 'green',
  },
  READY_MEALS: {
    id: 'ready_meals',
    name: '–ì–æ—Ç–æ–≤–∏ —Ö—Ä–∞–Ω–∏',
    icon: 'üçï',
    color: 'orange',
  },
  SNACKS: {
    id: 'snacks',
    name: '–°–Ω–∞–∫–æ–≤–µ',
    icon: 'üçø',
    color: 'yellow',
  },
  DRINKS: {
    id: 'drinks',
    name: '–ù–∞–ø–∏—Ç–∫–∏',
    icon: 'ü•§',
    color: 'blue',
  },
  HOUSEHOLD: {
    id: 'household',
    name: '–î–æ–º–∞–∫–∏–Ω—Å–∫–∏',
    icon: 'üßπ',
    color: 'purple',
  },
  PERSONAL_CARE: {
    id: 'personal_care',
    name: '–õ–∏—á–Ω–∞ —Ö–∏–≥–∏–µ–Ω–∞',
    icon: 'üß¥',
    color: 'pink',
  },
  OTHER: {
    id: 'other',
    name: '–î—Ä—É–≥–∏',
    icon: 'üì¶',
    color: 'gray',
  },
} as const;

// Rule-based keyword matching for Bulgarian products
const KEYWORD_RULES = {
  basic_foods: [
    // –ú–µ—Å–æ (Meat)
    '–º–µ—Å–æ', '–ø–∏–ª–µ—à–∫–æ', '–ø–∏–ª–µ', '—Å–≤–∏–Ω—Å–∫–æ', '—Å–≤–∏–Ω—Å–∫–∏', '–≥–æ–≤–µ–∂–¥–æ', '–≥–æ–≤–µ–∂–¥', '–∫–µ–±–∞–ø', '–∫–µ–±–∞–ø—á–µ',
    '—à—É–Ω–∫–∞', '—Å–∞–ª–∞–º', '–ª—É–∫–∞–Ω–∫–∞', '—Å—É–¥–∂—É–∫', '–Ω–∞–¥–µ–Ω–∏—Ü–∞', '–±–µ–∫–æ–Ω', '–ø–∞—Ç–µ—à–∫–æ', '–∞–≥–Ω–µ—à–∫–æ',
    '–ø—ä—Ä–∂–æ–ª–∞', '–∫–æ—Ç–ª–µ—Ç', '–∫–∞—Ä–Ω–∞—á–µ', '–∫—é—Ñ—Ç–µ', '—Ç–µ–ª–µ—à–∫–æ', '–¥—Ä–æ–±', '—á–µ—Ä–µ–Ω –¥—Ä–æ–±', '–µ–∑–∏–∫',
    '—Å—ä—Ä—Ü–∞', '–≥—ä—Ä–¥–∏', '–±—É—Ç', '—Ñ–∏–ª–µ', '–∫–∞–π–º–∞', '—á–µ–≤–µ—Ä–º–µ—Ç–∞',

    // –†–∏–±–∞ (Fish)
    '—Ä–∏–±–∞', '—Å—å–æ–º–≥–∞', '—Å–∫—É–º—Ä–∏—è', '—Ç–æ–Ω', '–ø–∞–ª–∞–º—É–¥', '—Ü–∞—Ü–∞', '–ø—ä—Å—Ç—ä—Ä–≤–∞',
    '–º–æ—Ä—Å–∫–∏', '–º–æ—Ä—Å–∫–∞', '–∫–∞–ª–º–∞—Ä', '–æ–∫—Ç–æ–ø–æ–¥', '—Å–∫–∞—Ä–∏–¥–∞', '–º–∏–¥–∏', '—Ä–∞—Ü–∏',
    '—Ö–µ–∫', '—Å–∞—Ñ—Ä–∏–¥', '—Å–∞—Ä–¥–∏–Ω–∞', '–∞–Ω—à–æ–∞',

    // –ú–ª–µ—á–Ω–∏ (Dairy)
    '–º–ª—è–∫–æ', '–º–ª–µ–∫–æ', '—Å–∏—Ä–µ–Ω–µ', '–∫–∞—à–∫–∞–≤–∞–ª', '–π–æ–≥—É—Ä—Ç', '–∫–∏—Å–µ–ª–æ', '–º–∞—Å–ª–æ', '–∏–∑–≤–∞—Ä–∞', '–∫—Ä–µ–º–∞',
    '—Å–º–µ—Ç–∞–Ω–∞', '–∞–π—Ä–∞–Ω', '–∫–µ—Ñ–∏—Ä', '–∫–∞—Ç—ä–∫', '–º–æ—Ü–∞—Ä–µ–ª–∞', '–ø–∞—Ä–º–µ–∑–∞–Ω', '—Ñ–µ—Ç–∞', '—Ä–∏–∫–æ—Ç–∞',
    '–∑—Ä—ä–Ω–µ—Å—Ç', '—Ç–æ–ø–µ–Ω–æ', '–ø—Ä—è—Å–Ω–æ', '–±–∏–æ –º–ª—è–∫–æ', '–∫—Ä–∞–≤–µ', '–æ–≤—á–µ', '–∫–æ–∑–∏',

    // –•–ª—è–± (Bread & Bakery)
    '—Ö–ª—è–±', '–ø–∏—Ç–∫–∞', '–∫–∏—Ñ–ª–∞', '—Ñ—Ä–∞–Ω–∑–µ–ª–∞', '–±–∞–≥–µ—Ç–∞', '—Å–∏–º–∏—Ç', '–≥–µ–≤—Ä–µ–∫', '–∫–æ–∑—É–Ω–∞–∫',
    '—Ç–æ—Å—Ç', '–≥–µ–≤—Ä–µ—Ü–∏', '–ø–∏—Ç–∞', '—Ñ–æ–∫–∞—á–∞', '—á–∏–∞–±–∞—Ç–∞', '–ø–æ–≥–∞—á–∞',

    // –Ø–π—Ü–∞ (Eggs)
    '—è–π—Ü–∞', '—è–π—Ü–µ',

    // –ó–µ–ª–µ–Ω—á—É—Ü–∏ (Vegetables)
    '–¥–æ–º–∞—Ç', '–¥–æ–º–∞—Ç–µ–Ω', '–∫—Ä–∞—Å—Ç–∞–≤–∏—Ü–∞', '–∫—Ä–∞—Å—Ç–∞–≤–∏—Ü', '–º–æ—Ä–∫–æ–≤–∏', '–º–æ—Ä–∫–æ–≤', '–ª—É–∫', '–∫–∞—Ä—Ç–æ—Ñ',
    '—á—É—à–∫–∞', '—á—É—à–∫–∏', '–ø–∏–ø–µ—Ä', '–±—Ä–æ–∫–æ–ª–∏', '–∫–∞—Ä—Ñ–∏–æ–ª', '–∑–µ–ª–µ', '—Å–ø–∞–Ω–∞–∫', '–º–∞—Ä—É–ª—è',
    '—Å–∞–ª–∞—Ç–∞', '–º–∞–≥–¥–∞–Ω–æ–∑', '–∫–æ–ø—ä—Ä', '—Ü–µ–ª–∏–Ω–∞', '–ø–∞—Ç–ª–∞–¥–∂–∞–Ω', '—Ç–∏–∫–≤–∞', '—Ç–∏–∫–≤–∏—á–∫–∞',
    '–∑–µ–ª–∫–∞', '—á–µ—Å—ä–Ω', '–ø—Ä–∞–∑', '–≥—Ä–∞—Ö', '—Ä–µ–ø–∞', '—Ü–≤–µ–∫–ª–æ', '–∞—Å–ø–µ—Ä–∂–∏',
    '–∑–µ–ª–µ–Ω —Ñ–∞—Å—É–ª', '—Ç–∏–∫–≤–∏—á–∫–∏', '–∫–∏—Å–µ–ª–µ—Ü', '–¥–∞—Ñ–∏–Ω–æ–≤ –ª–∏—Å—Ç',

    // –ü–ª–æ–¥–æ–≤–µ (Fruits)
    '—è–±—ä–ª–∫–∞', '—è–±—ä–ª–∫', '–±–∞–Ω–∞–Ω', '–ø–æ—Ä—Ç–æ–∫–∞–ª', '–≥—Ä–æ–∑–¥–µ', '–∫—Ä—É—à–∞', '–ø—Ä–∞—Å–∫–æ–≤–∞', '–∫–∞–π—Å–∏—è',
    '—á–µ—Ä–µ—à–∞', '–≤–∏—à–Ω–∞', '—è–≥–æ–¥–∞', '–º–∞–ª–∏–Ω–∞', '–±–æ—Ä–æ–≤–∏–Ω–∫–∞', '–¥–∏–Ω—è', '–ø—ä–ø–µ—à', '–∫–∏–≤–∏',
    '–º–∞–Ω–¥–∞—Ä–∏–Ω–∞', '–ª–∏–º–æ–Ω', '–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç', '–Ω–µ–∫—Ç–∞—Ä–∏–Ω–∞', '—Å–ª–∏–≤–∏', '—Å–º–æ–∫–∏–Ω–∏',
    '–∞–≤–æ–∫–∞–¥–æ', '–º–∞–Ω–≥–æ', '–ø–∞–ø–∞—è', '–∞–Ω–∞–Ω–∞—Å', '–º–∞—Ä–∞–∫—É—è',

    // –û—Å–Ω–æ–≤–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ (Staples)
    '–æ–ª–∏–æ', '–∑–∞—Ö–∞—Ä', '–±—Ä–∞—à–Ω–æ', '–æ—Ä–∏–∑', '–º–∞–∫–∞—Ä–æ–Ω–∏', '–ø–∞—Å—Ç–∞', '—Å–ø–∞–≥–µ—Ç–∏', '—Å–æ–ª', '–ø–∏–ø–µ—Ä',
    '–æ—Ü–µ—Ç', '–∑–µ—Ö—Ç–∏–Ω', '–±–æ–±', '–ª–µ—â–∞', '–Ω–∞—Ö—É—Ç', '—Ñ–∞—Å—É–ª', '–≥—Ä–∏—Å', '–±—É–ª–≥—É—Ä',
    '—Ñ–∏–¥–µ', '—Ü–∞—Ä–µ–≤–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ', '—Å–æ–¥–∞', '–±–∞–∫–ø—É–ª–≤–µ—Ä', '–º–∞—è', '–≤–∞–Ω–∏–ª–∏—è',
    '–∫–∞–Ω–µ–ª–∞', '–∫–∞—Ä–∞–º—Ñ–∏–ª', '—á–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä', '–∫–∏–º–∏–æ–Ω', '–±–æ—Å–∏–ª–µ–∫', '—Ä–∏–≥–∞–Ω',
    '—á—É–±—Ä–∏—Ü–∞', '–¥–∂–æ–¥–∂–µ–Ω', '–¥–∞—Ñ–∏–Ω–æ–≤', '–º–∞—â–µ—Ä–∫–∞',

    // –Ø–¥–∫–∏ –∏ —Å–µ–º–µ–Ω–∞ (Nuts and seeds)
    '—è–¥–∫–∞', '—è–¥–∫–∏', '–±–∞–¥–µ–º', '–æ—Ä–µ—Ö', '—Ñ—ä—Å—Ç—ä–∫', '–ª–µ—à–Ω–∏–∫', '–∫–∞—à—É', '—Å–ª—ä–Ω—á–æ–≥–ª–µ–¥',
    '—Ç–∏–∫–≤–µ–Ω–∏ —Å–µ–º–∫–∏', '—Å—É—Å–∞–º', '—á–∏—è', '–ª–µ–Ω',

    // –ü–æ–¥–ø—Ä–∞–≤–∫–∏ –∏ —Å–æ—Å–æ–≤–µ
    '–∫–µ—Ç—á—É–ø', '–º–∞–π–æ–Ω–µ–∑–∞', '–≥–æ—Ä—á–∏—Ü–∞', '–ª—é—Ç–µ–Ω–∏—Ü–∞', '–∞–π–≤–∞—Ä', '–ø–∏–Ω–¥–∂—É—Ä',
    '—Ç—É—Ä—à–∏—è', '–∑–µ–ª–µ–Ω—á—É–∫–æ–≤–∞', '—Å–æ–ª', '–±—É–ª—å–æ–Ω', '—Å—É–ø–∞', '—Å–æ—Å',
    '–¥–æ–º–∞—Ç–µ–Ω', '–¥–æ–º–∞—Ç–µ–Ω–∞ –ø–∞—Å—Ç–∞', '–¥–æ–º–∞—Ç–∏ –∫–æ–Ω—Å–µ—Ä–≤–∞',
  ],

  ready_meals: [
    '–ø–∏—Ü–∞', '–ø–∏—Ü–∏', '—Å–∞–Ω–¥–≤–∏—á', '—Ö–∞–º–±—É—Ä–≥–µ—Ä', '–±—É—Ä–≥–µ—Ä', '–∫—Ä–æ–∞—Å–∞–Ω', '–ø–æ–Ω–∏—á–∫–∏', '–¥–æ–Ω—ä—Ç',
    '—Ç–æ—Ä—Ç–∏–ª–∞', '—Ñ–∞—Ö–∏—Ç–∞', '–±—É—Ä—Ä–∏—Ç–æ', '—Å—É–ø–∞', '–≥–æ—Ç–æ–≤–æ', '–≥–æ—Ç–æ–≤–∞', '–≥–æ—Ç–æ–≤–∏', '–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ',
    '–ø—Ä–µ–ø–µ—á–µ–Ω', '–ø–µ—á–µ–Ω–æ', '–ø—ä—Ä–∂–µ–Ω–æ', '–º—É—Å–∞–∫–∞', '–±–∞–Ω–∏—Ü–∞', '–∑–µ–ª–Ω–∏–∫', '—Ç–∏–∫–≤–µ–Ω–∏–∫',
    '–≥—å–æ–∑–ª–µ–º–µ', '–ø–∞—Ç–∞—Ç–Ω–∏–∫', '–ø–∞–ª–∞—á–∏–Ω–∫–∞', '–∫—Ä–µ–ø–∏',
  ],

  snacks: [
    '—á–∏–ø—Å', '—á–∏–ø–æ–≤–µ', '–±–∏—Å–∫–≤–∏—Ç–∞', '–±–∏—Å–∫–≤–∏—Ç–∏', '–≤–∞—Ñ–ª–∞', '—à–æ–∫–æ–ª–∞–¥', '–±–æ–Ω–±–æ–Ω', '–∂–µ–ª–µ',
    '–∫—É—Ä–∞–±–∏—è', '–∫–µ–∫—Å', '–º—ä—Ñ–∏–Ω', '—Å–ª–∞–¥–∫–æ', '—Å–ª–∞–¥–∫–∏', '–ø–æ–Ω–∏—á–∫–∏', '–ø–æ–ø –∫–æ—Ä–Ω', '–ø–æ–ø–∫–æ—Ä–Ω',
    '–∫—Ä–µ–∫–µ—Ä', '—Å—Ç–∞—Ñ–∏–¥–∏', '—Å—É—à–µ–Ω', '—Å—É—à–µ–Ω–∏', '—Å–Ω–∞–∫—Å', '–≥—Ä–∏–∑–∏–Ω–∏', '—Å–æ–ª–µ–Ω–∫–∏', '—Å—Ç—Ä—ä–∫—á–µ—Ç–∞',
    '—Ü–∞—Ä–µ–≤–∏—Ü–∞', '—Å—Ç–∏–∫', '–ø—É–∫–∞–Ω–∫–∏', '–ª–æ–∫—É–º', '—Ö–∞–ª–≤–∞', '—Ç–∞—Ö–∞–Ω', '–º–µ–¥', '–±–ª–∏–∑–∞–ª–∫–∞',
    '–∂–µ–ª–∏—Ä–∞–Ω–∏', '–∑–∞—Ö–∞—Ä–Ω–æ –∏–∑–¥–µ–ª–∏–µ', '—Ç–æ—Ä—Ç–∞', '—Å–ª–∞–¥–∫–∏—à', '–±–∞–∫–ª–∞–≤–∞', '–µ–∫–ª–µ—Ä',
    '–º–µ–¥–µ–Ω–∞ –ø–∏—Ç–∞', '—Å–æ–ª–µ—Ç–∏', '–∫—Ä–µ–∫–µ—Ä',
  ],

  drinks: [
    '–≤–æ–¥–∞', '—Å–æ–∫', '–∫–æ–∫–∞', '–∫–æ–ª–∞', '—Ñ–∞–Ω—Ç–∞', '—Å–ø—Ä–∞–π—Ç', '–ø–µ–ø—Å–∏', '–Ω–∞–ø–∏—Ç–∫–∞', '—á–∞–π',
    '–∫–∞—Ñ–µ', '–±–∏—Ä–∞', '–≤–∏–Ω–æ', '—Ä–∞–∫–∏—è', '—É–∏—Å–∫–∏', '–≤–æ–¥–∫–∞', '–¥–∂–∏–Ω', '–∫–æ–Ω—è–∫', '–±—Ä–µ–Ω–¥–∏',
    '–µ–Ω–µ—Ä–≥–∏–π–Ω–∞', '–µ–Ω–µ—Ä–≥–∏–µ–Ω', '–ª–∏–º–æ–Ω–∞–¥–∞', '–∞–π—Å —Ç–∏', '–Ω–µ—Å—Ç–∏–π', '–±–æ–∑–∞', '–∫–æ–º–ø–æ—Ç',
    '–Ω–µ–∫—Ç–∞—Ä', '–≤–∏—Ç–∞–º–∏–Ω–∫–∞', '–∞–ª–∫–æ—Ö–æ–ª', '–∞–ª–∫–æ—Ö–æ–ª–Ω–∞', '–±–µ–∑–∞–ª–∫–æ—Ö–æ–ª–Ω–∞', '–≥–∞–∑–∏—Ä–∞–Ω–∞',
    '–Ω–µ–≥–∞–∑–∏—Ä–∞–Ω–∞', '–º–∏–Ω–µ—Ä–∞–ª–Ω–∞', '–±–∞–Ω–∫—è', '–¥–µ–≤–∏–Ω', '–≥–æ—Ä–Ω–∞ –±–∞–Ω—è',
    '–≤–µ—Ä–º—É—Ç', '—à–∞–º–ø–∞–Ω—Å–∫–æ', '–º–∞—Å—Ç–∏–∫–∞', '–Ω–µ—Å –∫–∞—Ñ–µ', '–∫–∞–∫–∞–æ',
  ],

  household: [
    '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–º–∏–µ—â', '–ø–æ—á–∏—Å—Ç–≤–∞—â', '—Ç–æ–∞–ª–µ—Ç–Ω–∞', '—Ö–∞—Ä—Ç–∏—è', '—Å–∞–ª—Ñ–µ—Ç–∫–∏', '—Ç–æ—Ä–±–∏—á–∫–∏',
    '—Ç–æ—Ä–±–∏', '—Ñ–æ–ª–∏–æ', '–ø—Ä–∞—Ö', '—Ç–µ—á–Ω–æ—Å—Ç', '—Å–∞—à–µ', '—Å–∞–ø—É–Ω', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ',
    '–¥–æ–º–∞–∫–∏–Ω—Å–∫–∏', '–∫—É—Ö–Ω–µ–Ω—Å–∫–∏', '–∫—ä—Ä–ø–∞', '–∫—ä—Ä–ø–∏', '–≥—ä–±–∞', '—á–µ—Ç–∫–∞', '–∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä',
    '–æ—Å–≤–µ–∂–∏—Ç–µ–ª', '–ø—Ä–µ–ø–∞—Ä–∞—Ç –∑–∞', '–ø—Ä–µ–ø–∞—Ä–∞—Ç –∑–∞ —Å—ä–¥–æ–≤–µ', '–∑–∞ –ø—Ä–∞–Ω–µ—Ç–æ', '–∑–∞ –ø—Ä–∞–Ω–µ',
    '–æ–º–µ–∫–æ—Ç–∏—Ç–µ–ª', '–±–µ–ª–∏–Ω–∞', '–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ç–∞–Ω—Ç', '–∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥', '—Å–≤–µ—â', '–∫–ª–µ—á–∫–∞',
    '—Ç–æ—Ä–±–∏—á–∫–∏ –∑–∞ —Å–º–µ—Ç', '–ø–µ—Ä–∏–ª–µ–Ω', '–≥–µ–ª', '–ø—Ä–µ–ø–∞—Ä–∞—Ç –∑–∞ –º–∏–µ–Ω–µ', '–∑–∞ —Å—ä–¥–æ–º–∏—è–ª–Ω–∞',
    '—Ç–∞–±–ª–µ—Ç–∫–∏ –∑–∞', '–∫–∞–ø—Å—É–ª–∏ –∑–∞', '–∫–∏–±—Ä–∏—Ç', '–∑–∞–ø–∞–ª–∫–∞',
  ],

  personal_care: [
    '—à–∞–º–ø–æ–∞–Ω', '–±–∞–ª—Å–∞–º', '–¥—É—à', '–≥–µ–ª', '—Å–∞–ø—É–Ω', '–ø–∞—Å—Ç–∞', '—á–µ—Ç–∫–∞ –∑–∞ –∑—ä–±–∏', '–∫—Ä–µ–º',
    '–ª–æ—Å–∏–æ–Ω', '–¥–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç', '–ø–∞—Ä—Ñ—é–º', '–ø–∞–º–ø–µ—Ä—Å', '–ø–µ–ª–µ–Ω–∏', '–ø—Ä–µ–≤—Ä—ä–∑–∫–∏', '—Ç–∞–º–ø–æ–Ω–∏',
    '–±—Ä—ä—Å–Ω–µ–Ω–µ', '–∫–æ–∑–º–µ—Ç–∏–∫–∞', '–≥—Ä–∏–º', '–º–∞—Å–∫–∞', '–ø–∏–ª–∏–Ω–≥', '—Å–∫—Ä–∞–±', '—Å–µ—Ä—É–º', '–æ–ª–∏–æ –∑–∞',
    '—Ö–∏–≥–∏–µ–Ω–∞', '—Ö–∏–≥–∏–µ–Ω–Ω–∏', '–∏–Ω—Ç–∏–º–Ω–∞', '–∏–∑–º–∏–≤–∞—â', '–ø–æ—á–∏—Å—Ç–≤–∞—â', '–º–æ–∫—Ä–∏', '–≤–ª–∞–∂–Ω–∏',
    '–∞–Ω—Ç–∏–ø–µ—Ä—Å–ø–∏—Ä–∞–Ω—Ç', '—Å–ª—ä–Ω—Ü–µ–∑–∞—â–∏—Ç–µ–Ω', '—Å–ª–µ–¥ —Å–ª—ä–Ω—Ü–µ', '–º–∞—Å–∫–∞ –∑–∞ –∫–æ—Å–∞',
    '–±–æ—è –∑–∞ –∫–æ—Å–∞', '–ª–∞–∫ –∑–∞ –∫–æ—Å–∞', '—Å—Ç–∞–π–ª–∏–Ω–≥', '–º—É—Å', '—Å–ø—Ä–µ–π –∑–∞ –∫–æ—Å–∞',
    '–¥–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç', '–ø–∞—Ä—Ñ—é–º', '—Ç–æ–∞–ª–µ—Ç–Ω–∞ –≤–æ–¥–∞', '–æ–¥–µ–∫–æ–ª–æ–Ω',
  ],
};

// Store-specific patterns for better matching
const STORE_PATTERNS = {
  LIDL: {
    // LIDL-specific product patterns
    prefixes: ['FRESH', 'BIO', 'ORGANIC', 'PREMIUM'],
    brands: ['MILBONA', 'FREEWAY', 'COMBINO', 'PIRATO', 'SOLEVITA', 'ALESTO'],
    patterns: [
      { regex: /MILBONA/i, category: 'basic_foods', subcategory: 'dairy' },
      { regex: /PIRATO/i, category: 'snacks' },
      { regex: /SOLEVITA/i, category: 'drinks' },
      { regex: /CIEN/i, category: 'personal_care' },
      { regex: /W5/i, category: 'household' },
    ],
  },
  KAUFLAND: {
    brands: ['K-CLASSIC', 'K-BIO', 'K-TAKE IT VEGGIE', 'K-FREE'],
    patterns: [
      { regex: /K-CLASSIC/i, category: 'basic_foods' },
      { regex: /K-BIO/i, category: 'basic_foods' },
      { regex: /K-TAKE IT/i, category: 'ready_meals' },
    ],
  },
  BILLA: {
    brands: ['CLEVER', 'BILLA BIO', 'SPAR'],
    patterns: [
      { regex: /CLEVER/i, category: 'basic_foods' },
      { regex: /BILLA BIO/i, category: 'basic_foods' },
    ],
  },
  FANTASTICO: {
    brands: ['FANTASTICO', '–§–ê–ù–¢–ê–°–¢–ò–ö–û'],
  },
  METRO: {
    brands: ['METRO CHEF', 'ARO', 'FINE FOOD'],
  },
};

export interface CategorizationResult {
  category_id: string;
  category_name: string;
  confidence: number;
  method: 'rule' | 'store_pattern' | 'ai' | 'user_correction' | 'cache';
  subcategory?: string;
}

// In-memory cache for AI categorizations
const categorizationCache = new Map<string, CategorizationResult>();

/**
 * Normalize product name for better matching
 */
function normalizeProductName(name: string): string {
  return name
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove diacritics
    .replace(/[^a-z0-9–∞-—è\s]/g, ' ') // Keep only letters, numbers, spaces
    .replace(/\s+/g, ' ')
    .trim();
}

/**
 * Rule-based categorization using keyword matching
 */
function categorizeByRules(productName: string): CategorizationResult | null {
  const normalized = normalizeProductName(productName);

  for (const [categoryId, keywords] of Object.entries(KEYWORD_RULES)) {
    for (const keyword of keywords) {
      if (normalized.includes(keyword)) {
        const category = Object.values(CATEGORIES).find(c => c.id === categoryId);
        if (category) {
          return {
            category_id: categoryId,
            category_name: category.name,
            confidence: 0.95,
            method: 'rule',
          };
        }
      }
    }
  }

  return null;
}

/**
 * Store-specific pattern matching
 */
function categorizeByStorePattern(
  productName: string,
  storeName?: string
): CategorizationResult | null {
  if (!storeName) return null;

  const storeKey = Object.keys(STORE_PATTERNS).find(key =>
    storeName.toUpperCase().includes(key)
  ) as keyof typeof STORE_PATTERNS | undefined;

  if (!storeKey) return null;

  const storeConfig = STORE_PATTERNS[storeKey];

  // Check brand-specific patterns
  if (!storeConfig.patterns) return null;

  for (const pattern of storeConfig.patterns) {
    if (pattern.regex.test(productName)) {
      const category = Object.values(CATEGORIES).find(c => c.id === pattern.category);
      if (category) {
        return {
          category_id: pattern.category,
          category_name: category.name,
          confidence: 0.85,
          method: 'store_pattern',
          subcategory: pattern.subcategory,
        };
      }
    }
  }

  return null;
}

/**
 * AI-based categorization using OpenAI
 */
async function categorizeByAI(productName: string): Promise<CategorizationResult | null> {
  try {
    // Check cache first
    const cacheKey = normalizeProductName(productName);
    if (categorizationCache.has(cacheKey)) {
      const cached = categorizationCache.get(cacheKey)!;
      return { ...cached, method: 'cache' };
    }

    const categoryList = Object.values(CATEGORIES)
      .filter(c => c.id !== 'other')
      .map(c => `${c.id}: ${c.name}`)
      .join(', ');

    const prompt = `–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–∞–π —Ç–æ–∑–∏ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç –æ—Ç –º–∞–≥–∞–∑–∏–Ω: "${productName}"

–ù–∞–ª–∏—á–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryList}

–í—ä—Ä–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä –≤ JSON —Ñ–æ—Ä–º–∞—Ç:
{
  "category_id": "id –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞",
  "confidence": —á–∏—Å–ª–æ –º–µ–∂–¥—É 0 –∏ 1
}

–ò–∑–±–µ—Ä–∏ –Ω–∞–π-–ø–æ–¥—Ö–æ–¥—è—â–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ê–∫–æ –Ω–µ —Å–∏ —Å–∏–≥—É—Ä–µ–Ω, –≤—ä—Ä–Ω–∏ "other" —Å –Ω–∏—Å–∫–∞ confidence.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢–∏ —Å–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –∏ –¥–æ–º–∞–∫–∏–Ω—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏. –û—Ç–≥–æ–≤–∞—Ä—è–π —Å–∞–º–æ —Å –≤–∞–ª–∏–¥–µ–Ω JSON.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.3,
      max_tokens: 100,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) return null;

    // Clean markdown code blocks if present
    let cleanedContent = content.trim();
    if (cleanedContent.startsWith('```json')) {
      cleanedContent = cleanedContent.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
    } else if (cleanedContent.startsWith('```')) {
      cleanedContent = cleanedContent.replace(/```\s*/g, '');
    }

    // Parse AI response
    const parsed = JSON.parse(cleanedContent);
    const category = Object.values(CATEGORIES).find(c => c.id === parsed.category_id);

    if (!category) return null;

    const result: CategorizationResult = {
      category_id: parsed.category_id,
      category_name: category.name,
      confidence: parsed.confidence || 0.7,
      method: 'ai',
    };

    // Cache the result
    categorizationCache.set(cacheKey, result);

    return result;
  } catch (error) {
    console.error('AI categorization error:', error);
    return null;
  }
}

/**
 * Check for user corrections in database
 */
async function getUserCorrection(
  productName: string,
  userId: string
): Promise<CategorizationResult | null> {
  try {
    const supabase = createServerClient(true);
    const normalized = normalizeProductName(productName);

    // Check if user has corrected this product before
    const { data, error } = await supabase
      .from('categorization_corrections')
      .select('category_id')
      .eq('user_id', userId)
      .eq('product_name_normalized', normalized)
      .order('created_at', { ascending: false })
      .limit(1);

    if (error || !data || data.length === 0) return null;

    const categoryId = data[0].category_id;
    const category = Object.values(CATEGORIES).find(c => c.id === categoryId);

    if (!category) return null;

    return {
      category_id: categoryId,
      category_name: category.name,
      confidence: 1.0,
      method: 'user_correction',
    };
  } catch (error) {
    console.error('Error fetching user correction:', error);
    return null;
  }
}

/**
 * Main categorization function - tries all methods in order
 */
export async function categorizeProduct(
  productName: string,
  storeName?: string,
  userId?: string
): Promise<CategorizationResult> {
  console.log(`[Categorization] Processing: "${productName}"`, { storeName, userId });

  // 0. Check Bulgarian product cache FIRST (INSTANT - saves 2-3 seconds!)
  const cachedCategory = getCategoryFromCache(productName);
  if (cachedCategory) {
    console.log(`[Categorization] ‚ö° INSTANT Cache hit: "${productName}" ‚Üí ${cachedCategory}`);
    return {
      category_id: cachedCategory.toLowerCase().replace(/\s+/g, '_'),
      category_name: cachedCategory,
      confidence: 1.0, // Cache is 100% confident
      method: 'cache',
    };
  }

  // 1. Check user corrections (highest priority for learning)
  if (userId) {
    const userCorrection = await getUserCorrection(productName, userId);
    if (userCorrection) {
      console.log(`[Categorization] User correction found:`, userCorrection);
      return userCorrection;
    }
  }

  // 2. Try rule-based matching
  const ruleResult = categorizeByRules(productName);
  if (ruleResult) {
    console.log(`[Categorization] Rule match found:`, ruleResult);
    return ruleResult;
  }

  // 3. Try store-specific patterns
  const storeResult = categorizeByStorePattern(productName, storeName);
  if (storeResult) {
    console.log(`[Categorization] Store pattern match found:`, storeResult);
    return storeResult;
  }

  // 4. Try AI categorization (slowest, last resort)
  const aiResult = await categorizeByAI(productName);
  if (aiResult && aiResult.confidence >= 0.6) {
    console.log(`[Categorization] AI match found:`, aiResult);
    return aiResult;
  }

  // 5. Default to "Other" category
  console.log(`[Categorization] No match found, defaulting to "other"`);
  return {
    category_id: 'other',
    category_name: CATEGORIES.OTHER.name,
    confidence: 0,
    method: 'rule',
  };
}

/**
 * Save user correction to database for learning
 */
export async function saveUserCorrection(
  productName: string,
  categoryId: string,
  userId: string
): Promise<void> {
  try {
    const supabase = createServerClient(true);
    const normalized = normalizeProductName(productName);

    await supabase.from('categorization_corrections').insert({
      user_id: userId,
      product_name: productName,
      product_name_normalized: normalized,
      category_id: categoryId,
      created_at: new Date().toISOString(),
    });

    console.log(`[Categorization] User correction saved:`, { productName, categoryId });
  } catch (error) {
    console.error('Error saving user correction:', error);
  }
}

/**
 * Batch categorize multiple products
 */
export async function categorizeProducts(
  products: Array<{ name: string; id?: string }>,
  storeName?: string,
  userId?: string
): Promise<Array<CategorizationResult & { productId?: string }>> {
  const results = await Promise.all(
    products.map(async (product) => {
      const result = await categorizeProduct(product.name, storeName, userId);
      return {
        ...result,
        productId: product.id,
      };
    })
  );

  return results;
}

/**
 * Get categorization statistics
 */
export function getCategorizationStats() {
  return {
    cacheSize: categorizationCache.size,
    categories: Object.values(CATEGORIES),
  };
}

/**
 * Dashboard-specific TypeScript interfaces for –ü—Ä–∏–∑–º–∞
 * Extended types for the detailed expense breakdown dashboard
 */

import { Database, Tables } from './database';

// ============================================================================
// DASHBOARD DATA TYPES
// ============================================================================

export interface DashboardStats {
  totalReceipts: number;
  totalItems: number;
  totalSpent: number;
  averagePerReceipt: number;
  monthlyBudget?: number;
  budgetUsed: number;
  budgetRemaining: number;
  selectedMonth: string;
  selectedYear: number;
}

export interface CategoryWithDetails {
  id: string;
  name: string;
  icon: string;
  color: string;
  totalSpent: number;
  itemCount: number;
  percentage: number;
  budgetAmount?: number;
  budgetUsed: number;
  budgetRemaining: number;
  budgetStatus: 'good' | 'warning' | 'danger';
  isExpanded: boolean;
  items: DetailedReceiptItem[];
}

export interface DetailedReceiptItem {
  id: string;
  receiptId: string;
  productName: string;
  quantity: number;
  unit: string | null;
  unitPrice: number;
  totalPrice: number;
  purchaseDate: string;
  storeName: string;
  storeId: string | null;
  receiptNumber: string | null;
  categoryId: string;
  categoryName: string;
}

export interface StoreGroup {
  storeId: string | null;
  storeName: string;
  totalSpent: number;
  itemCount: number;
  receiptCount: number;
  items: DetailedReceiptItem[];
}

export interface CategoryBreakdownData {
  category: CategoryWithDetails;
  stores: StoreGroup[];
  totalSpent: number;
  itemCount: number;
  averageItemPrice: number;
  mostExpensiveItem: DetailedReceiptItem | null;
  mostFrequentStore: string | null;
  spendingTrend: 'up' | 'down' | 'stable';
}

// ============================================================================
// DASHBOARD FILTERS & SORTING
// ============================================================================

export interface DashboardFilters {
  month: number;
  year: number;
  storeFilter: string;
  searchQuery: string;
  dateRange: {
    start: string;
    end: string;
  };
  hideEmptyCategories: boolean;
  sortBy: 'date' | 'amount' | 'store' | 'product';
  sortOrder: 'asc' | 'desc';
  pageSize: number;
  currentPage: number;
}

export interface TableColumn {
  key: string;
  label: string;
  sortable: boolean;
  width?: string;
  align?: 'left' | 'center' | 'right';
  format?: 'currency' | 'date' | 'number' | 'text';
}

// ============================================================================
// ACTION TYPES
// ============================================================================

export interface ItemActionResult {
  success: boolean;
  message: string;
  updatedItem?: DetailedReceiptItem;
  error?: string;
}

export interface BudgetUpdateData {
  categoryId: string;
  amount: number;
  month: number;
  year: number;
}

export interface ExportData {
  categories: CategoryBreakdownData[];
  totalStats: DashboardStats;
  filters: DashboardFilters;
  exportDate: string;
  format: 'csv' | 'excel' | 'pdf';
}

// ============================================================================
// BULGARIAN LOCALIZATION TYPES
// ============================================================================

export interface BulgarianDateFormats {
  short: string; // DD.MM.YYYY
  long: string;  // DD –º–µ—Å–µ—Ü YYYY
  time: string;  // HH:mm
  dateTime: string; // DD.MM.YYYY HH:mm
}

export interface BulgarianNumberFormats {
  currency: (amount: number) => string; // 12,50 –ª–≤
  number: (num: number) => string;      // 1 234,56
  percentage: (pct: number) => string;  // 23,5%
  quantity: (qty: number, unit?: string) => string; // 2,5 –∫–≥
}

export interface BulgarianCategories {
  'cat-basic-foods': {
    id: string;
    name: '–û—Å–Ω–æ–≤–Ω–∏ —Ö—Ä–∞–Ω–∏';
    icon: 'üçé';
    color: string;
  };
  'cat-ready-foods': {
    id: string;
    name: '–ì–æ—Ç–æ–≤–∏ —Ö—Ä–∞–Ω–∏';
    icon: 'üçï';
    color: string;
  };
  'cat-beverages': {
    id: string;
    name: '–ù–∞–ø–∏—Ç–∫–∏';
    icon: 'üç∫';
    color: string;
  };
  'cat-snacks': {
    id: string;
    name: '–ó–∞–∫—É—Å–∫–∏';
    icon: 'üç≠';
    color: string;
  };
  'cat-non-food': {
    id: string;
    name: '–ù–µ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏';
    icon: 'üß¥';
    color: string;
  };
}

// ============================================================================
// DASHBOARD STATE MANAGEMENT
// ============================================================================

export interface DashboardState {
  loading: boolean;
  error: string | null;
  stats: DashboardStats;
  categories: CategoryBreakdownData[];
  filters: DashboardFilters;
  selectedCategory: string | null;
  expandedCategories: Set<string>;
  editingItem: DetailedReceiptItem | null;
  showExportModal: boolean;
  showBudgetModal: boolean;
}

export type DashboardAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_STATS'; payload: DashboardStats }
  | { type: 'SET_CATEGORIES'; payload: CategoryBreakdownData[] }
  | { type: 'UPDATE_FILTERS'; payload: Partial<DashboardFilters> }
  | { type: 'TOGGLE_CATEGORY'; payload: string }
  | { type: 'SELECT_CATEGORY'; payload: string | null }
  | { type: 'SET_EDITING_ITEM'; payload: DetailedReceiptItem | null }
  | { type: 'TOGGLE_MODAL'; payload: { modal: 'export' | 'budget'; show: boolean } }
  | { type: 'UPDATE_ITEM'; payload: { itemId: string; updates: Partial<DetailedReceiptItem> } }
  | { type: 'DELETE_ITEM'; payload: string };

// ============================================================================
// API RESPONSE TYPES
// ============================================================================

export interface DashboardApiResponse {
  success: boolean;
  data: {
    stats: DashboardStats;
    categories: CategoryBreakdownData[];
    totalRecords: number;
  };
  error?: string;
  timestamp: string;
}

export interface ItemUpdateRequest {
  itemId: string;
  productName?: string;
  quantity?: number;
  unitPrice?: number;
  categoryId?: string;
  notes?: string;
}

export interface BudgetApiResponse {
  success: boolean;
  data: {
    categoryId: string;
    budgetAmount: number;
    used: number;
    remaining: number;
    status: 'good' | 'warning' | 'danger';
  };
  error?: string;
}

// ============================================================================
// COMPONENT PROP TYPES
// ============================================================================

export interface DashboardHeaderProps {
  stats: DashboardStats;
  filters: DashboardFilters;
  onFiltersChange: (filters: Partial<DashboardFilters>) => void;
  onAddExpense: () => void;
  onEditBudget: () => void;
  onExportData: () => void;
}

export interface CategorySectionProps {
  category: CategoryBreakdownData;
  isExpanded: boolean;
  onToggle: () => void;
  onItemEdit: (item: DetailedReceiptItem) => void;
  onItemDelete: (itemId: string) => void;
  filters: DashboardFilters;
  onFiltersChange: (filters: Partial<DashboardFilters>) => void;
}

export interface ItemTableProps {
  items: DetailedReceiptItem[];
  loading: boolean;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
  onSort: (column: string) => void;
  onEdit: (item: DetailedReceiptItem) => void;
  onDelete: (itemId: string) => void;
  showReceipt: (receiptId: string) => void;
}

export interface StatsCardsProps {
  stats: DashboardStats;
  loading: boolean;
  trend?: {
    spending: number;
    receipts: number;
    comparison: 'vs_last_month' | 'vs_same_month_last_year';
  };
}

export interface BudgetProgressProps {
  budgetAmount: number;
  used: number;
  status: 'good' | 'warning' | 'danger';
  showDetails?: boolean;
  onEdit?: () => void;
}

// ============================================================================
// UTILITY TYPES FOR BULGARIAN FORMATTING
// ============================================================================

export interface BulgarianUIStrings {
  dashboard: {
    title: '–ü—Ä–∏–∑–º–∞ - –¢–∞–±–ª–æ –∑–∞ —Ä–∞–∑—Ö–æ–¥–∏';
    subtitle: '–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    loading: '–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏...';
    error: '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ—Ç–æ';
    noData: '–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥';
    refresh: '–û–±–Ω–æ–≤–∏ –¥–∞–Ω–Ω–∏—Ç–µ';
  };
  categories: {
    basicFoods: '–û—Å–Ω–æ–≤–Ω–∏ —Ö—Ä–∞–Ω–∏';
    readyFoods: '–ì–æ—Ç–æ–≤–∏ —Ö—Ä–∞–Ω–∏';
    beverages: '–ù–∞–ø–∏—Ç–∫–∏';
    snacks: '–ó–∞–∫—É—Å–∫–∏';
    nonFood: '–ù–µ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏';
  };
  table: {
    store: '–ú–∞–≥–∞–∑–∏–Ω';
    date: '–î–∞—Ç–∞';
    product: '–ü—Ä–æ–¥—É–∫—Ç';
    quantity: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ';
    amount: '–°—É–º–∞';
    receipt: '–ö–∞—Å–æ–≤ –±–æ–Ω';
    actions: '–î–µ–π—Å—Ç–≤–∏—è';
    edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π';
    delete: '–ò–∑—Ç—Ä–∏–π';
    view: '–í–∏–∂';
  };
  actions: {
    addExpense: '–î–æ–±–∞–≤–∏ —Ä–∞–∑—Ö–æ–¥';
    editBudget: '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π –±—é–¥–∂–µ—Ç';
    exportData: '–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π –¥–∞–Ω–Ω–∏';
    save: '–ó–∞–ø–∞–∑–∏';
    cancel: '–û—Ç–∫–∞–∂–∏';
    confirm: '–ü–æ—Ç–≤—ä—Ä–¥–∏';
    delete: '–ò–∑—Ç—Ä–∏–π';
  };
  filters: {
    searchPlaceholder: '–¢—ä—Ä—Å–∏ –ø—Ä–æ–¥—É–∫—Ç...';
    storePlaceholder: '–í—Å–∏—á–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∏';
    sortBy: '–°–æ—Ä—Ç–∏—Ä–∞–π –ø–æ';
    sortOrder: '–†–µ–¥ –Ω–∞ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–µ';
    hideEmpty: '–°–∫—Ä–∏–π –ø—Ä–∞–∑–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    dateRange: '–ü–µ—Ä–∏–æ–¥';
    month: '–ú–µ—Å–µ—Ü';
    year: '–ì–æ–¥–∏–Ω–∞';
  };
  months: {
    january: '–Ø–Ω—É–∞—Ä–∏';
    february: '–§–µ–≤—Ä—É–∞—Ä–∏';
    march: '–ú–∞—Ä—Ç';
    april: '–ê–ø—Ä–∏–ª';
    may: '–ú–∞–π';
    june: '–Æ–Ω–∏';
    july: '–Æ–ª–∏';
    august: '–ê–≤–≥—É—Å—Ç';
    september: '–°–µ–ø—Ç–µ–º–≤—Ä–∏';
    october: '–û–∫—Ç–æ–º–≤—Ä–∏';
    november: '–ù–æ–µ–º–≤—Ä–∏';
    december: '–î–µ–∫–µ–º–≤—Ä–∏';
  };
}
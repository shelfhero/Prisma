'use client';

import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { StoreLoyaltyAnalysis as StoreLoyaltyType } from '@/types/analytics';
import { Store, Heart, TrendingUp, TrendingDown, Award, Calendar, ShoppingBag } from 'lucide-react';

interface StoreLoyaltyAnalysisProps {
  data: StoreLoyaltyType[];
  loading?: boolean;
  showDetails?: boolean;
}

function formatBulgarianCurrency(amount: number): string {
  return new Intl.NumberFormat('bg-BG', {
    style: 'currency',
    currency: 'BGN',
    minimumFractionDigits: 2,
  }).format(amount).replace('BGN', '–ª–≤');
}

function formatBulgarianDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('bg-BG', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function getLoyaltyLevel(score: number): { level: string; color: string; icon: string } {
  if (score >= 80) return { level: '–ó–ª–∞—Ç–µ–Ω –∫–ª–∏–µ–Ω—Ç', color: 'text-yellow-600 bg-yellow-50', icon: 'ü•á' };
  if (score >= 60) return { level: '–°—Ä–µ–±—ä—Ä–µ–Ω –∫–ª–∏–µ–Ω—Ç', color: 'text-gray-600 bg-gray-50', icon: 'ü•à' };
  if (score >= 40) return { level: '–ë—Ä–æ–Ω–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç', color: 'text-amber-600 bg-amber-50', icon: 'ü•â' };
  if (score >= 20) return { level: '–û–±–∏—á–∞–π–µ–Ω –∫–ª–∏–µ–Ω—Ç', color: 'text-blue-600 bg-blue-50', icon: 'üë§' };
  return { level: '–ù–æ–≤ –∫–ª–∏–µ–Ω—Ç', color: 'text-green-600 bg-green-50', icon: 'üÜï' };
}

function getVisitFrequencyDescription(avgDays: number): string {
  if (avgDays <= 3) return '–ú–Ω–æ–≥–æ —á–µ—Å—Ç–æ (–≤—Å–µ–∫–∏ 2-3 –¥–Ω–∏)';
  if (avgDays <= 7) return '–ß–µ—Å—Ç–æ (–≤–µ–¥–Ω—ä–∂ —Å–µ–¥–º–∏—á–Ω–æ)';
  if (avgDays <= 14) return '–†–µ–¥–æ–≤–Ω–æ (–Ω–∞ 2 —Å–µ–¥–º–∏—Ü–∏)';
  if (avgDays <= 30) return '–ú–µ—Å–µ—á–Ω–æ';
  return '–†—è–¥–∫–æ (–Ω–∞–¥ –º–µ—Å–µ—Ü)';
}

interface StoreCardProps {
  store: StoreLoyaltyType;
  rank: number;
  onViewDetails: () => void;
  showDetails: boolean;
}

function StoreCard({ store, rank, onViewDetails, showDetails }: StoreCardProps) {
  const loyaltyInfo = getLoyaltyLevel(store.loyaltyScore);
  const visitDescription = getVisitFrequencyDescription(store.visitFrequency.average);

  return (
    <Card className="overflow-hidden transition-all duration-200 hover:shadow-lg">
      {/* Header */}
      <div className="p-4 pb-2">
        <div className="flex justify-between items-start mb-3">
          <div className="flex items-center gap-3">
            <div className="flex items-center justify-center w-12 h-12 rounded-full bg-blue-100">
              <Store className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <div className="flex items-center gap-2">
                <h3 className="font-semibold text-lg">{store.storeName}</h3>
                <Badge variant="secondary" className="text-xs">
                  #{rank}
                </Badge>
              </div>
              <Badge className={`text-xs ${loyaltyInfo.color} border-none`}>
                {loyaltyInfo.icon} {loyaltyInfo.level}
              </Badge>
            </div>
          </div>

          <div className="text-right">
            <div className="text-2xl font-bold text-gray-900">
              {formatBulgarianCurrency(store.totalSpent)}
            </div>
            <div className="text-sm text-gray-500">
              {store.receiptsCount} –ø–æ–∫—É–ø–∫–∏
            </div>
          </div>
        </div>

        {/* Loyalty Score */}
        <div className="mb-3">
          <div className="flex justify-between items-center text-sm mb-1">
            <span className="text-gray-600">–õ–æ—è–ª–Ω–æ—Å—Ç</span>
            <span className="font-medium">{store.loyaltyScore}/100</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-blue-400 to-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${store.loyaltyScore}%` }}
            />
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div className="flex items-center gap-2">
            <ShoppingBag className="w-4 h-4 text-gray-400" />
            <div>
              <div className="font-medium">{store.itemsCount}</div>
              <div className="text-gray-500">–ø—Ä–æ–¥—É–∫—Ç–∞</div>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <Calendar className="w-4 h-4 text-gray-400" />
            <div>
              <div className="font-medium">{visitDescription}</div>
              <div className="text-gray-500">—á–µ—Å—Ç–æ—Ç–∞</div>
            </div>
          </div>
        </div>
      </div>

      {/* Expandable Details */}
      {showDetails && (
        <div className="p-4 pt-0 border-t bg-gray-50">
          {/* Visit History */}
          <div className="mb-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ç–∞</h4>
            <div className="grid grid-cols-2 gap-4 text-xs">
              <div>
                <span className="text-gray-500">–ü—ä—Ä–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ:</span>
                <div className="font-medium">{formatBulgarianDate(store.firstVisit)}</div>
              </div>
              <div>
                <span className="text-gray-500">–ü–æ—Å–ª–µ–¥–Ω–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ:</span>
                <div className="font-medium">{formatBulgarianDate(store.lastVisit)}</div>
              </div>
            </div>
          </div>

          {/* Favorite Categories */}
          <div className="mb-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">–õ—é–±–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
            <div className="space-y-2">
              {store.favoriteCategories.slice(0, 3).map((category, idx) => (
                <div key={idx} className="flex justify-between items-center">
                  <span className="text-xs text-gray-600">{category.categoryName}</span>
                  <div className="flex items-center gap-2">
                    <span className="text-xs font-medium">
                      {formatBulgarianCurrency(category.amount)}
                    </span>
                    <span className="text-xs text-gray-500">
                      ({category.percentage.toFixed(1)}%)
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Price Comparison */}
          <div className="mb-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">–¶–µ–Ω–æ–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</h4>
            <div className="flex items-center justify-between">
              <span className="text-xs text-gray-600">–°–ø—Ä—è–º–æ —Å—Ä–µ–¥–Ω–∏—Ç–µ —Ü–µ–Ω–∏:</span>
              <Badge
                variant="secondary"
                className={
                  store.priceComparison.ranking === 'cheapest' ? 'text-green-600 bg-green-50' :
                  store.priceComparison.ranking === 'expensive' ? 'text-red-600 bg-red-50' :
                  'text-gray-600 bg-gray-50'
                }
              >
                {store.priceComparison.ranking === 'cheapest' ? 'üí∞ –ï–≤—Ç–∏–Ω' :
                 store.priceComparison.ranking === 'expensive' ? 'üí∏ –°–∫—ä–ø' :
                 '‚öñÔ∏è –°—Ä–µ–¥–µ–Ω'}
              </Badge>
            </div>
          </div>

          {/* Average Receipt Value */}
          <div className="mb-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">–°—Ä–µ–¥–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∞</h4>
            <div className="text-lg font-bold text-blue-600">
              {formatBulgarianCurrency(store.averageReceiptValue)}
            </div>
          </div>

          {/* Recommendations */}
          {store.recommendations.length > 0 && (
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">–ü—Ä–µ–ø–æ—Ä—ä–∫–∏</h4>
              <div className="space-y-2">
                {store.recommendations.slice(0, 2).map((rec, idx) => (
                  <div key={idx} className={`p-2 rounded text-xs ${
                    rec.priority === 'high' ? 'bg-red-50 text-red-700' :
                    rec.priority === 'medium' ? 'bg-yellow-50 text-yellow-700' :
                    'bg-blue-50 text-blue-700'
                  }`}>
                    <div className="font-medium">{rec.type}</div>
                    <div>{rec.message}</div>
                    {rec.potentialSaving && (
                      <div className="mt-1 font-medium">
                        –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–∏ —Å–ø–µ—Å—Ç—è–≤–∞–Ω–∏—è: {formatBulgarianCurrency(rec.potentialSaving)}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Toggle Button */}
      <div className="p-3 border-t">
        <Button
          variant="ghost"
          size="sm"
          onClick={onViewDetails}
          className="w-full text-xs"
        >
          {showDetails ? '–°–∫—Ä–∏–π –¥–µ—Ç–∞–π–ª–∏' : '–ü–æ–∫–∞–∂–∏ –¥–µ—Ç–∞–π–ª–∏'}
        </Button>
      </div>
    </Card>
  );
}

export default function StoreLoyaltyAnalysis({ data, loading = false, showDetails = false }: StoreLoyaltyAnalysisProps) {
  const [expandedStores, setExpandedStores] = useState<Set<string>>(new Set());

  const toggleStoreDetails = (storeId: string) => {
    const newExpanded = new Set(expandedStores);
    if (newExpanded.has(storeId)) {
      newExpanded.delete(storeId);
    } else {
      newExpanded.add(storeId);
    }
    setExpandedStores(newExpanded);
  };

  if (loading) {
    return (
      <Card className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>
          <div className="space-y-3">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="h-24 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </Card>
    );
  }

  if (!data.length) {
    return (
      <Card className="p-6">
        <div className="text-center py-12">
          <Store className="w-16 h-16 text-gray-300 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ª–æ—è–ª–Ω–æ—Å—Ç –∫—ä–º –º–∞–≥–∞–∑–∏–Ω–∏
          </h3>
          <p className="text-gray-500">
            –î–æ–±–∞–≤–µ—Ç–µ –ø–æ–≤–µ—á–µ –∫–∞—Å–æ–≤–∏ –±–µ–ª–µ–∂–∫–∏ –∑–∞ –¥–∞ –≤–∏–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ª–æ—è–ª–Ω–æ—Å—Ç—Ç–∞.
          </p>
        </div>
      </Card>
    );
  }

  const totalSpent = data.reduce((sum, store) => sum + store.totalSpent, 0);
  const topStore = data[0];
  const averageLoyalty = data.reduce((sum, store) => sum + store.loyaltyScore, 0) / data.length;

  return (
    <div className="space-y-6">
      {/* Header with Summary */}
      <Card className="p-6">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              üè™ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ª–æ—è–ª–Ω–æ—Å—Ç—Ç–∞ –∫—ä–º –º–∞–≥–∞–∑–∏–Ω–∏
            </h3>
            <p className="text-sm text-gray-600">
              –î–µ—Ç–∞–π–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –≤–∞—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è –ø—Ä–∏ –ø–∞–∑–∞—Ä—É–≤–∞–Ω–µ
            </p>
          </div>
          <Badge className="bg-blue-100 text-blue-800">
            {data.length} –º–∞–≥–∞–∑–∏–Ω–∞
          </Badge>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-green-50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <Award className="w-5 h-5 text-green-600" />
              <span className="text-sm font-medium text-green-700">–ù–∞–π-–ª–æ—è–ª–µ–Ω</span>
            </div>
            <div className="text-lg font-bold text-green-900">{topStore.storeName}</div>
            <div className="text-sm text-green-600">
              {formatBulgarianCurrency(topStore.totalSpent)} ‚Ä¢ {topStore.receiptsCount} –ø–æ–∫—É–ø–∫–∏
            </div>
          </div>

          <div className="bg-blue-50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <Heart className="w-5 h-5 text-blue-600" />
              <span className="text-sm font-medium text-blue-700">–°—Ä–µ–¥–Ω–∞ –ª–æ—è–ª–Ω–æ—Å—Ç</span>
            </div>
            <div className="text-lg font-bold text-blue-900">{averageLoyalty.toFixed(0)}/100</div>
            <div className="text-sm text-blue-600">
              –û–±—â–æ {data.reduce((sum, store) => sum + store.receiptsCount, 0)} –ø–æ–∫—É–ø–∫–∏
            </div>
          </div>

          <div className="bg-purple-50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <ShoppingBag className="w-5 h-5 text-purple-600" />
              <span className="text-sm font-medium text-purple-700">–û–±—â–æ —Ö–∞—Ä—á–µ–Ω–µ</span>
            </div>
            <div className="text-lg font-bold text-purple-900">
              {formatBulgarianCurrency(totalSpent)}
            </div>
            <div className="text-sm text-purple-600">
              –°—Ä–µ–¥–Ω–æ {formatBulgarianCurrency(totalSpent / data.length)} –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
            </div>
          </div>
        </div>

        {/* Insights */}
        <div className="mt-4 p-3 bg-amber-50 rounded-lg">
          <div className="flex items-start gap-2">
            <div className="text-amber-600 mt-0.5">üí°</div>
            <div>
              <div className="text-sm font-medium text-amber-900 mb-1">
                –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ª–æ—è–ª–Ω–æ—Å—Ç—Ç–∞:
              </div>
              <div className="text-xs text-amber-700">
                {(() => {
                  const topStorePercentage = (topStore.totalSpent / totalSpent) * 100;
                  if (topStorePercentage > 50) {
                    return `–í–∏–µ —Ö–∞—Ä—á–∏—Ç–µ ${topStorePercentage.toFixed(0)}% –æ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞—Ç–∞ —Å–∏ –≤ ${topStore.storeName}. –ü–æ–º–∏—Å–ª–µ—Ç–µ –∑–∞ —Å—Ä–∞–≤–Ω—è–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∏ –≤ –¥—Ä—É–≥–∏ –º–∞–≥–∞–∑–∏–Ω–∏.`;
                  } else if (data.length >= 5) {
                    return `–î–æ–±—Ä–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –ø–∞–∑–∞—Ä—É–≤–∞—Ç–µ –æ—Ç ${data.length} —Ä–∞–∑–ª–∏—á–Ω–∏ –º–∞–≥–∞–∑–∏–Ω–∏, –∫–æ–µ—Ç–æ –≤–∏ –ø–æ–º–∞–≥–∞ –¥–∞ –Ω–∞–º–∏—Ä–∞—Ç–µ –Ω–∞–π-–¥–æ–±—Ä–∏—Ç–µ —Ü–µ–Ω–∏.`;
                  } else {
                    return `–ü–∞–∑–∞—Ä—É–≤–∞—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ –æ—Ç ${data.length} –º–∞–≥–∞–∑–∏–Ω–∞. –†–∞–∑–≥–ª–µ–¥–∞–π—Ç–µ –∏ –¥—Ä—É–≥–∏ –æ–ø—Ü–∏–∏ –∑–∞ –ø–æ-–¥–æ–±—Ä–∏ —Ü–µ–Ω–∏.`;
                  }
                })()}
              </div>
            </div>
          </div>
        </div>
      </Card>

      {/* Store Cards */}
      <div className="grid gap-4">
        {data.slice(0, 10).map((store, index) => (
          <StoreCard
            key={store.storeId}
            store={store}
            rank={index + 1}
            onViewDetails={() => toggleStoreDetails(store.storeId)}
            showDetails={expandedStores.has(store.storeId)}
          />
        ))}
      </div>

      {data.length > 10 && (
        <Card className="p-4">
          <div className="text-center text-sm text-gray-500">
            –ü–æ–∫–∞–∑–∞–Ω–∏ —Å–∞ —Ç–æ–ø 10 –º–∞–≥–∞–∑–∏–Ω–∞. –û–±—â–æ {data.length} –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞.
          </div>
        </Card>
      )}
    </div>
  );
}
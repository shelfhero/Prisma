/**
 * Bulgarian Text Display Test Component
 * Tests proper rendering of Bulgarian Cyrillic text
 */

'use client';

import { useState } from 'react';

interface TextSample {
  category: string;
  samples: {
    text: string;
    description: string;
    expectedEncoding?: string;
  }[];
}

const BULGARIAN_TEXT_SAMPLES: TextSample[] = [
  {
    category: '–û—Å–Ω–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏',
    samples: [
      {
        text: '–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ –ü—Ä–∏–∑–º–∞!',
        description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
      },
      {
        text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        description: '–ë—É—Ç–æ–Ω –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
      },
      {
        text: '–í—Ö–æ–¥',
        description: '–ë—É—Ç–æ–Ω –∑–∞ –≤—Ö–æ–¥'
      },
      {
        text: '–ò–∑—Ö–æ–¥',
        description: '–ë—É—Ç–æ–Ω –∑–∞ –∏–∑—Ö–æ–¥'
      },
      {
        text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        description: '–ú–µ–Ω—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
      }
    ]
  },
  {
    category: '–ö–∞—Å–æ–≤–∏ –±–µ–ª–µ–∂–∫–∏',
    samples: [
      {
        text: '–°–∫–∞–Ω–∏—Ä–∞–π –∫–∞—Å–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞',
        description: '–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è'
      },
      {
        text: '–î–æ–±–∞–≤–∏ –±–µ–ª–µ–∂–∫–∞ —Ä—ä—á–Ω–æ',
        description: '–ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –Ω–∞—á–∏–Ω'
      },
      {
        text: '–ü–æ—Å–ª–µ–¥–Ω–∏ –±–µ–ª–µ–∂–∫–∏',
        description: '–°–ø–∏—Å—ä–∫ —Å –±–µ–ª–µ–∂–∫–∏'
      },
      {
        text: '–û–±—â–æ —Ä–∞–∑—Ö–æ–¥–∏',
        description: '–°—É–º–∞ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ'
      },
      {
        text: '–°—Ä–µ–¥–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç',
        description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
      }
    ]
  },
  {
    category: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏',
    samples: [
      {
        text: '–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏',
        description: '–û—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
      },
      {
        text: '–ù–∞–ø–∏—Ç–∫–∏',
        description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–ø–∏—Ç–∫–∏'
      },
      {
        text: '–î–æ–º–∞–∫–∏–Ω—Å–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏',
        description: '–î—ä–ª–≥–æ –∏–º–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
      },
      {
        text: '–ö–æ–∑–º–µ—Ç–∏–∫–∞ –∏ –ª–∏—á–Ω–∞ —Ö–∏–≥–∏–µ–Ω–∞',
        description: '–°–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏'
      },
      {
        text: '–î–µ—Ç—Å–∫–∏ —Ö—Ä–∞–Ω–∏ –∏ –∏–≥—Ä–∞—á–∫–∏',
        description: '–°–º–µ—Å–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }
    ]
  },
  {
    category: '–°—ä–æ–±—â–µ–Ω–∏—è –∑–∞ –≥—Ä–µ—à–∫–∏',
    samples: [
      {
        text: '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ',
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞'
      },
      {
        text: '–ù–µ—É—Å–ø–µ—à–Ω–æ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞',
        description: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ upload'
      },
      {
        text: '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å',
        description: '–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞'
      },
      {
        text: '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ 8 —Å–∏–º–≤–æ–ª–∞',
        description: '–ò–∑–∏—Å–∫–≤–∞–Ω–µ –∑–∞ –ø–∞—Ä–æ–ª–∞'
      },
      {
        text: '–°–µ—Å–∏—è—Ç–∞ –≤–∏ –µ –∏–∑—Ç–µ–∫–ª–∞. –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –æ—Ç–Ω–æ–≤–æ.',
        description: '–ü—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è'
      }
    ]
  },
  {
    category: '–î–∞—Ç–∏ –∏ –≤–∞–ª—É—Ç–∏',
    samples: [
      {
        text: '25,50 –ª–≤.',
        description: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –ª–µ–≤ —Å –¥–µ—Ü–∏–º–∞–ª–∏'
      },
      {
        text: '1 234,56 –ª–≤.',
        description: '–ü–æ-–≥–æ–ª—è–º–∞ —Å—É–º–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏'
      },
      {
        text: '15 —Å–µ–ø—Ç–µ–º–≤—Ä–∏ 2024 –≥.',
        description: '–ë—ä–ª–≥–∞—Ä—Å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞'
      },
      {
        text: '–≤—á–µ—Ä–∞ –≤ 14:30',
        description: '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–æ –≤—Ä–µ–º–µ'
      },
      {
        text: '—Ç–æ–∑–∏ –º–µ—Å–µ—Ü',
        description: '–ü–µ—Ä–∏–æ–¥ –æ—Ç –≤—Ä–µ–º–µ'
      }
    ]
  },
  {
    category: '–°–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏',
    samples: [
      {
        text: '–ê–ë–í –∞–±–≤ –Ø–Æ–Ø —è—é—è',
        description: '–ì–ª–∞–≤–Ω–∏ –∏ –º–∞–ª–∫–∏ –±—É–∫–≤–∏'
      },
      {
        text: '–ë–î–ñ ‚Üí –±—ä–ª–≥–∞—Ä—Å–∫–∏ –¥—É–º–∏ –∏ –∑–Ω–∞—Ü–∏',
        description: '–°–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏'
      },
      {
        text: '–ü—Ä–æ–¥—É–∫—Ç ‚Ññ1 - 100% –∫–∞—á–µ—Å—Ç–≤–æ',
        description: '–¶–∏—Ñ—Ä–∏ –∏ —Å–∏–º–≤–æ–ª–∏'
      },
      {
        text: 'E-mail: test@prizma.bg',
        description: '–õ–∞—Ç–∏–Ω—Å–∫–∏ + –∫–∏—Ä–∏–ª–∏—Ü–∞'
      },
      {
        text: '–¢–µ–ª.: +359 2 123 456',
        description: '–¢–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä'
      }
    ]
  }
];

export default function BulgarianTextTest() {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [testResults, setTestResults] = useState<{ [key: string]: boolean }>({});

  const testTextRendering = (text: string, key: string) => {
    // Simple test to check if text renders correctly
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    if (!ctx) {
      setTestResults(prev => ({ ...prev, [key]: false }));
      return;
    }

    ctx.font = '16px Inter, sans-serif';
    const width = ctx.measureText(text).width;

    // If width is 0 or very small, the text might not be rendering properly
    const isRendering = width > 0 && width > text.length * 2;

    setTestResults(prev => ({ ...prev, [key]: isRendering }));
  };

  const testAllTexts = () => {
    BULGARIAN_TEXT_SAMPLES.forEach(category => {
      category.samples.forEach((sample, index) => {
        const key = `${category.category}-${index}`;
        testTextRendering(sample.text, key);
      });
    });
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-medium text-gray-900">
          üáßüá¨ –¢–µ—Å—Ç –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏—è —Ç–µ–∫—Å—Ç
        </h3>
        <button
          onClick={testAllTexts}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          –¢–µ—Å—Ç–≤–∞–π –≤—Å–∏—á–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Category List */}
        <div>
          <h4 className="font-medium text-gray-900 mb-3">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
          <div className="space-y-2">
            {BULGARIAN_TEXT_SAMPLES.map((category) => (
              <button
                key={category.category}
                onClick={() => setSelectedCategory(
                  selectedCategory === category.category ? null : category.category
                )}
                className={`w-full text-left px-3 py-2 rounded-lg border transition-colors ${
                  selectedCategory === category.category
                    ? 'bg-blue-50 border-blue-200 text-blue-800'
                    : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
                }`}
              >
                {category.category}
              </button>
            ))}
          </div>
        </div>

        {/* Text Samples */}
        <div>
          <h4 className="font-medium text-gray-900 mb-3">
            {selectedCategory ? `–¢–µ–∫—Å—Ç–æ–≤–µ –æ—Ç "${selectedCategory}"` : '–ò–∑–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è'}
          </h4>

          {selectedCategory && (
            <div className="space-y-3">
              {BULGARIAN_TEXT_SAMPLES
                .find(cat => cat.category === selectedCategory)
                ?.samples.map((sample, index) => {
                  const key = `${selectedCategory}-${index}`;
                  const testResult = testResults[key];

                  return (
                    <div
                      key={index}
                      className="border border-gray-200 rounded-lg p-4"
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex-1">
                          <div className="text-lg font-medium text-gray-900 mb-1">
                            {sample.text}
                          </div>
                          <div className="text-sm text-gray-600">
                            {sample.description}
                          </div>
                        </div>

                        {testResult !== undefined && (
                          <div className={`ml-4 px-2 py-1 rounded text-xs font-medium ${
                            testResult
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {testResult ? 'OK' : '–ü—Ä–æ–±–ª–µ–º'}
                          </div>
                        )}
                      </div>

                      {/* Font Test */}
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <div className="text-gray-500 mb-1">Inter font:</div>
                          <div style={{ fontFamily: 'Inter, sans-serif' }}>
                            {sample.text}
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500 mb-1">System font:</div>
                          <div style={{ fontFamily: 'system-ui, sans-serif' }}>
                            {sample.text}
                          </div>
                        </div>
                      </div>

                      {/* Character encoding info */}
                      <div className="mt-3 pt-3 border-t border-gray-100">
                        <details>
                          <summary className="text-xs text-gray-500 cursor-pointer">
                            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                          </summary>
                          <div className="mt-2 text-xs text-gray-400 font-mono">
                            <div>–î—ä–ª–∂–∏–Ω–∞: {sample.text.length} —Å–∏–º–≤–æ–ª–∞</div>
                            <div>UTF-8: {new TextEncoder().encode(sample.text).length} –±–∞–π—Ç–∞</div>
                            <div>
                              –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {sample.text.split('').map(char =>
                                `U+${char.charCodeAt(0).toString(16).toUpperCase().padStart(4, '0')}`
                              ).join(' ')}
                            </div>
                          </div>
                        </details>
                      </div>
                    </div>
                  );
                })}
            </div>
          )}
        </div>
      </div>

      {/* Font Loading Test */}
      <div className="mt-8 pt-6 border-t border-gray-200">
        <h4 className="font-medium text-gray-900 mb-3">–¢–µ—Å—Ç –Ω–∞ —à—Ä–∏—Ñ—Ç–æ–≤–µ—Ç–µ</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
          <div className="p-4 border border-gray-200 rounded-lg">
            <div className="text-sm text-gray-500 mb-2">Inter (Cyrillic)</div>
            <div className="text-lg" style={{ fontFamily: 'Inter, sans-serif' }}>
              –ê–ë–í–ì–î–ï–∞–±–≤–≥–¥–µ
            </div>
          </div>
          <div className="p-4 border border-gray-200 rounded-lg">
            <div className="text-sm text-gray-500 mb-2">System UI</div>
            <div className="text-lg" style={{ fontFamily: 'system-ui, sans-serif' }}>
              –ê–ë–í–ì–î–ï–∞–±–≤–≥–¥–µ
            </div>
          </div>
          <div className="p-4 border border-gray-200 rounded-lg">
            <div className="text-sm text-gray-500 mb-2">Sans-serif</div>
            <div className="text-lg" style={{ fontFamily: 'sans-serif' }}>
              –ê–ë–í–ì–î–ï–∞–±–≤–≥–¥–µ
            </div>
          </div>
        </div>
      </div>

      {/* Instructions */}
      <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <h5 className="font-medium text-blue-900 mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ:</h5>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>‚Ä¢ –ò–∑–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –ª—è–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∞</li>
          <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç –ø—Ä–∞–≤–∏–ª–Ω–æ</li>
          <li>‚Ä¢ –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ "–¢–µ—Å—Ç–≤–∞–π –≤—Å–∏—á–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ" –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞</li>
          <li>‚Ä¢ –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –Ω—è–º–∞ –∫–≤–∞–¥—Ä–∞—Ç—á–µ—Ç–∞ (‚ñ°) –≤–º–µ—Å—Ç–æ –±—É–∫–≤–∏</li>
          <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏—Ç–µ —Å–∏–º–≤–æ–ª–∏ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ</li>
        </ul>
      </div>
    </div>
  );
}
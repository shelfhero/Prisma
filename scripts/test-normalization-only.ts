/**
 * Test Product Normalization System (No API Required)
 * Tests the product name parsing and normalization
 */

import { ProductNormalizer } from '../lib/product-normalizer';

// Sample products from Bulgarian receipts
const TEST_PRODUCTS = [
  // Dairy
  '–ú–õ–Ø–ö–û –í–ï–†–ï–Ø 3.6% 1–õ',
  '–°–ò–†–ï–ù–ï –ë–Ø–õ–û 400–ì',
  '–ö–ê–®–ö–ê–í–ê–õ –í–ò–¢–û–®–ê 200–ì',
  '–ô–û–ì–£–†–¢ –ì–£–°–¢ 500–ì–†',
  '–ú–ê–°–õ–û –ö–†–ê–í–ï 250–ì',
  '–ê–ô–†–ê–ù 1–õ',

  // Meat
  '–ü–ò–õ–ï–®–ö–û –§–ò–õ–ï 1–ö–ì',
  '–°–í–ò–ù–°–ö–ê –ö–ê–ô–ú–ê 500–ì',
  '–ì–û–í–ï–ñ–î–ò –ö–ï–ë–ê–ü–ß–ï–¢–ê',
  '–°–ê–õ–ê–ú –ï–õ–ï–ù–ê 200–ì',
  '–®–£–ù–ö–ê –ú–ê–î–ñ–ê–†–û–í',
  '–õ–£–ö–ê–ù–ö–ê –ü–ò–ö–ê–ù–¢–ù–ê',

  // Fish
  '–¢–û–ù –í –ö–û–ù–°–ï–†–í–ê 160–ì',
  '–°–¨–û–ú–ì–ê –§–ò–õ–ï 300–ì',
  '–°–ö–£–ú–†–ò–Ø –ü–£–®–ï–ù–ê',

  // Eggs
  '–Ø–ô–¶–ê –†–ê–ó–ú–ï–† L 10–ë–†',

  // Bread & Bakery
  '–•–õ–Ø–ë –ë–Ø–õ 500–ì',
  '–§–†–ê–ù–ó–ï–õ–ê –ü–™–õ–ù–û–ó–™–†–ù–ï–°–¢–ê',
  '–ö–û–ó–£–ù–ê–ö –ü–õ–ï–¢–ï–ù',
  '–ö–ò–§–õ–ò 6–ë–†',

  // Vegetables
  '–î–û–ú–ê–¢–ò –ß–ï–†–í–ï–ù–ò 1–ö–ì',
  '–ö–†–ê–°–¢–ê–í–ò–¶–ò 1–ö–ì',
  '–ß–£–®–ö–ò –ß–ï–†–í–ï–ù–ò',
  '–õ–£–ö –ñ–™–õ–¢',
  '–ö–ê–†–¢–û–§–ò 2–ö–ì',
  '–ú–û–†–ö–û–í–ò',
  '–ó–ï–õ–ï –ë–Ø–õ–û',
  '–ß–ï–°–™–ù',

  // Fruits
  '–Ø–ë–™–õ–ö–ò –ì–û–õ–î 1–ö–ì',
  '–ë–ê–ù–ê–ù–ò 1–ö–ì',
  '–ü–û–†–¢–û–ö–ê–õ–ò 2–ö–ì',
  '–ì–†–û–ó–î–ï –ß–ï–†–í–ï–ù–û',
  '–õ–ò–ú–û–ù–ò 500–ì',
  '–ú–ê–ù–î–ê–†–ò–ù–ò',

  // Staples
  '–ó–ê–•–ê–† –ö–†–ò–°–¢–ê–õ 1–ö–ì',
  '–°–û–õ –ú–û–†–°–ö–ê 500–ì',
  '–ë–†–ê–®–ù–û –¢–ò–ü 500 1–ö–ì',
  '–û–†–ò–ó –ë–ê–°–ú–ê–¢–ò 500–ì',
  '–ú–ê–ö–ê–†–û–ù–ò –°–ü–ê–ì–ï–¢–ò 500–ì',
  '–û–õ–ò–û –°–õ–™–ù–ß–û–ì–õ–ï–î 1–õ',
  '–û–õ–ò–û –ó–ï–•–¢–ò–ù 500–ú–õ',
  '–û–¶–ï–¢ –Ø–ë–™–õ–ö–û–í',

  // Condiments
  '–ö–ï–¢–ß–£–ü HEINZ 500–ì',
  '–ú–ê–ô–û–ù–ï–ó–ê 250–ú–õ',
  '–õ–Æ–¢–ï–ù–ò–¶–ê –ö–Æ–§–¢–ï–ù–°–ö–ê',

  // Drinks - Cold
  '–í–û–î–ê –î–ï–í–ò–ù 1.5–õ',
  '–°–û–ö –ü–û–†–¢–û–ö–ê–õ 1–õ',
  '–ö–û–ö–ê –ö–û–õ–ê 2–õ',
  '–§–ê–ù–¢–ê –ü–û–†–¢–û–ö–ê–õ 1.5–õ',
  '–ë–ò–†–ê –ö–ê–ú–ï–ù–ò–¶–ê 500–ú–õ',
  '–í–ò–ù–û –ú–ê–í–†–£–î',

  // Drinks - Hot
  '–ö–ê–§–ï –ù–ï–°–ö–ê–§–ï 100–ì',
  '–ß–ê–ô –ß–ï–†–ï–ù 20–ë–†',
  '–ö–ê–ö–ê–û –ù–ê –ü–†–ê–•',

  // Snacks
  '–ß–ò–ü–° –ü–ê–ü–†–ö–ê 150–ì',
  '–®–û–ö–û–õ–ê–î –ú–ò–õ–ö–ê 100–ì',
  '–ë–ò–°–ö–í–ò–¢–ò –ü–ï–¢–ò–§–£–†–ò',
  '–í–ê–§–õ–ò –ö–£–†–ê–ë–ò–ô–ù–ò',
  '–ë–û–ù–ë–û–ù–ò –ñ–ï–õ–ò–†–ê–ù–ò',
  '–Ø–î–ö–ò –ú–ò–ö–° 200–ì',

  // Ready Meals
  '–ü–ò–¶–ê –°–ê–õ–ê–ú 400–ì',
  '–ë–ê–ù–ò–¶–ê –° –°–ò–†–ï–ù–ï',
  '–ú–£–°–ê–ö–ê –ì–û–¢–û–í–ê',

  // Household
  '–ü–†–ï–ü–ê–†–ê–¢ –ó–ê –°–™–î–û–í–ï',
  '–ü–†–ê–• –ó–ê –ü–†–ê–ù–ï 3–ö–ì',
  '–¢–û–ê–õ–ï–¢–ù–ê –•–ê–†–¢–ò–Ø 8–ë–†',
  '–¢–û–†–ë–ò–ß–ö–ò –ó–ê –°–ú–ï–¢',
  '–ë–ï–õ–ò–ù–ê 1–õ',

  // Personal Care
  '–®–ê–ú–ü–û–ê–ù PANTENE 400–ú–õ',
  '–ü–ê–°–¢–ê –ó–ê –ó–™–ë–ò COLGATE',
  '–°–ê–ü–£–ù –¢–ï–ß–ï–ù',
  '–î–ï–ó–û–î–û–†–ê–ù–¢ NIVEA',
  '–ö–†–ï–ú –ó–ê –†–™–¶–ï',
];

function testNormalization() {
  console.log('üß™ Testing Enhanced Bulgarian Product Normalization\n');
  console.log('='.repeat(100));

  const results: {
    raw: string;
    normalized: string;
    base: string;
    brand: string | undefined;
    size: string;
    confidence: number;
    keywords: string[];
  }[] = [];

  let successCount = 0;
  let withBrand = 0;
  let withSize = 0;
  let withType = 0;

  for (const product of TEST_PRODUCTS) {
    try {
      // Parse and normalize
      const normalized = ProductNormalizer.normalize(product);
      const components = normalized.components;

      const sizeStr = components.size && components.unit
        ? `${components.size}${components.unit}`
        : 'N/A';

      const result = {
        raw: product,
        normalized: normalized.normalized_name,
        base: components.baseProduct,
        brand: components.brand,
        size: sizeStr,
        confidence: normalized.confidence,
        keywords: normalized.keywords,
      };

      results.push(result);
      successCount++;

      // Count features
      if (components.brand) withBrand++;
      if (components.size && components.unit) withSize++;
      if (components.type) withType++;

      // Log result
      const emoji = normalized.confidence >= 0.9 ? '‚úÖ' : normalized.confidence >= 0.7 ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`\n${emoji} ${product}`);
      console.log(`   ‚Üí ${normalized.normalized_name}`);
      console.log(`   Base: ${components.baseProduct} | Brand: ${components.brand || 'N/A'} | Size: ${sizeStr}`);
      if (components.type) console.log(`   Type: ${components.type}`);
      if (components.fatContent) console.log(`   Fat: ${components.fatContent}%`);
      console.log(`   Confidence: ${normalized.confidence.toFixed(2)}`);
      console.log(`   Keywords: ${normalized.keywords.slice(0, 5).join(', ')}${normalized.keywords.length > 5 ? '...' : ''}`);

    } catch (error) {
      console.error(`\n‚ùå FAILED: ${product}`);
      console.error(`   Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // Print summary
  console.log('\n' + '='.repeat(100));
  console.log('\nüìä NORMALIZATION SUMMARY\n');
  console.log(`Total Products Tested: ${TEST_PRODUCTS.length}`);
  console.log(`Successfully Normalized: ${successCount} (${(successCount/TEST_PRODUCTS.length*100).toFixed(1)}%)`);
  console.log('\nExtracted Features:');
  console.log(`  With Brand: ${withBrand} (${(withBrand/successCount*100).toFixed(1)}%)`);
  console.log(`  With Size/Unit: ${withSize} (${(withSize/successCount*100).toFixed(1)}%)`);
  console.log(`  With Type: ${withType} (${(withType/successCount*100).toFixed(1)}%)`);

  // Group by base product
  const byBase: Record<string, number> = {};
  results.forEach(r => {
    byBase[r.base] = (byBase[r.base] || 0) + 1;
  });

  console.log('\nBy Base Product (Top 10):');
  Object.entries(byBase)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .forEach(([base, count]) => {
      console.log(`  ${base}: ${count}`);
    });

  // Average confidence
  const avgConfidence = results.reduce((sum, r) => sum + r.confidence, 0) / results.length;
  console.log(`\nAverage Confidence: ${avgConfidence.toFixed(3)}`);

  // Check low confidence items
  const lowConfidence = results.filter(r => r.confidence < 0.7);
  if (lowConfidence.length > 0) {
    console.log(`\n‚ö†Ô∏è  Low Confidence Items (< 0.7): ${lowConfidence.length}`);
    lowConfidence.forEach(r => {
      console.log(`  - ${r.raw} (${r.confidence.toFixed(2)})`);
    });
  }

  console.log('\n' + '='.repeat(100));
  console.log('\n‚úÖ Normalization Test Complete!\n');

  return {
    total: TEST_PRODUCTS.length,
    success: successCount,
    withBrand,
    withSize,
    withType,
    avgConfidence,
    lowConfidence: lowConfidence.length,
  };
}

// Run the test
const stats = testNormalization();
console.log('üìà Final Statistics:', JSON.stringify(stats, null, 2));
